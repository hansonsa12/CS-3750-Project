{"ast":null,"code":"'use strict';\n\nmodule.exports = function (Chart) {\n  var helpers = Chart.helpers;\n  Chart.defaults.global.plugins = {};\n  /**\n   * The plugin service singleton\n   * @namespace Chart.plugins\n   * @since 2.1.0\n   */\n\n  Chart.plugins = {\n    /**\n     * Globally registered plugins.\n     * @private\n     */\n    _plugins: [],\n\n    /**\n     * This identifier is used to invalidate the descriptors cache attached to each chart\n     * when a global plugin is registered or unregistered. In this case, the cache ID is\n     * incremented and descriptors are regenerated during following API calls.\n     * @private\n     */\n    _cacheId: 0,\n\n    /**\n     * Registers the given plugin(s) if not already registered.\n     * @param {Array|Object} plugins plugin instance(s).\n     */\n    register: function (plugins) {\n      var p = this._plugins;\n      [].concat(plugins).forEach(function (plugin) {\n        if (p.indexOf(plugin) === -1) {\n          p.push(plugin);\n        }\n      });\n      this._cacheId++;\n    },\n\n    /**\n     * Unregisters the given plugin(s) only if registered.\n     * @param {Array|Object} plugins plugin instance(s).\n     */\n    unregister: function (plugins) {\n      var p = this._plugins;\n      [].concat(plugins).forEach(function (plugin) {\n        var idx = p.indexOf(plugin);\n\n        if (idx !== -1) {\n          p.splice(idx, 1);\n        }\n      });\n      this._cacheId++;\n    },\n\n    /**\n     * Remove all registered plugins.\n     * @since 2.1.5\n     */\n    clear: function () {\n      this._plugins = [];\n      this._cacheId++;\n    },\n\n    /**\n     * Returns the number of registered plugins?\n     * @returns {Number}\n     * @since 2.1.5\n     */\n    count: function () {\n      return this._plugins.length;\n    },\n\n    /**\n     * Returns all registered plugin instances.\n     * @returns {Array} array of plugin objects.\n     * @since 2.1.5\n     */\n    getAll: function () {\n      return this._plugins;\n    },\n\n    /**\n     * Calls enabled plugins for `chart` on the specified hook and with the given args.\n     * This method immediately returns as soon as a plugin explicitly returns false. The\n     * returned value can be used, for instance, to interrupt the current action.\n     * @param {Object} chart - The chart instance for which plugins should be called.\n     * @param {String} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n     * @param {Array} [args] - Extra arguments to apply to the hook call.\n     * @returns {Boolean} false if any of the plugins return false, else returns true.\n     */\n    notify: function (chart, hook, args) {\n      var descriptors = this.descriptors(chart);\n      var ilen = descriptors.length;\n      var i, descriptor, plugin, params, method;\n\n      for (i = 0; i < ilen; ++i) {\n        descriptor = descriptors[i];\n        plugin = descriptor.plugin;\n        method = plugin[hook];\n\n        if (typeof method === 'function') {\n          params = [chart].concat(args || []);\n          params.push(descriptor.options);\n\n          if (method.apply(plugin, params) === false) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * Returns descriptors of enabled plugins for the given chart.\n     * @returns {Array} [{ plugin, options }]\n     * @private\n     */\n    descriptors: function (chart) {\n      var cache = chart._plugins || (chart._plugins = {});\n\n      if (cache.id === this._cacheId) {\n        return cache.descriptors;\n      }\n\n      var plugins = [];\n      var descriptors = [];\n      var config = chart && chart.config || {};\n      var defaults = Chart.defaults.global.plugins;\n      var options = config.options && config.options.plugins || {};\n\n      this._plugins.concat(config.plugins || []).forEach(function (plugin) {\n        var idx = plugins.indexOf(plugin);\n\n        if (idx !== -1) {\n          return;\n        }\n\n        var id = plugin.id;\n        var opts = options[id];\n\n        if (opts === false) {\n          return;\n        }\n\n        if (opts === true) {\n          opts = helpers.clone(defaults[id]);\n        }\n\n        plugins.push(plugin);\n        descriptors.push({\n          plugin: plugin,\n          options: opts || {}\n        });\n      });\n\n      cache.descriptors = descriptors;\n      cache.id = this._cacheId;\n      return descriptors;\n    }\n  };\n  /**\n   * Plugin extension hooks.\n   * @interface IPlugin\n   * @since 2.1.0\n   */\n\n  /**\n   * @method IPlugin#beforeInit\n   * @desc Called before initializing `chart`.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#afterInit\n   * @desc Called after `chart` has been initialized and before the first update.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#beforeUpdate\n   * @desc Called before updating `chart`. If any plugin returns `false`, the update\n   * is cancelled (and thus subsequent render(s)) until another `update` is triggered.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   * @returns {Boolean} `false` to cancel the chart update.\n   */\n\n  /**\n   * @method IPlugin#afterUpdate\n   * @desc Called after `chart` has been updated and before rendering. Note that this\n   * hook will not be called if the chart update has been previously cancelled.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#beforeDatasetsUpdate\n  \t * @desc Called before updating the `chart` datasets. If any plugin returns `false`,\n   * the datasets update is cancelled until another `update` is triggered.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   * @returns {Boolean} false to cancel the datasets update.\n   * @since version 2.1.5\n   */\n\n  /**\n   * @method IPlugin#afterDatasetsUpdate\n   * @desc Called after the `chart` datasets have been updated. Note that this hook\n   * will not be called if the datasets update has been previously cancelled.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   * @since version 2.1.5\n   */\n\n  /**\n   * @method IPlugin#beforeLayout\n   * @desc Called before laying out `chart`. If any plugin returns `false`,\n   * the layout update is cancelled until another `update` is triggered.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   * @returns {Boolean} `false` to cancel the chart layout.\n   */\n\n  /**\n   * @method IPlugin#afterLayout\n   * @desc Called after the `chart` has been layed out. Note that this hook will not\n   * be called if the layout update has been previously cancelled.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#beforeRender\n   * @desc Called before rendering `chart`. If any plugin returns `false`,\n   * the rendering is cancelled until another `render` is triggered.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   * @returns {Boolean} `false` to cancel the chart rendering.\n   */\n\n  /**\n   * @method IPlugin#afterRender\n   * @desc Called after the `chart` has been fully rendered (and animation completed). Note\n   * that this hook will not be called if the rendering has been previously cancelled.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#beforeDraw\n   * @desc Called before drawing `chart` at every animation frame specified by the given\n   * easing value. If any plugin returns `false`, the frame drawing is cancelled until\n   * another `render` is triggered.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n   * @param {Object} options - The plugin options.\n   * @returns {Boolean} `false` to cancel the chart drawing.\n   */\n\n  /**\n   * @method IPlugin#afterDraw\n   * @desc Called after the `chart` has been drawn for the specific easing value. Note\n   * that this hook will not be called if the drawing has been previously cancelled.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#beforeDatasetsDraw\n  \t * @desc Called before drawing the `chart` datasets. If any plugin returns `false`,\n   * the datasets drawing is cancelled until another `render` is triggered.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n   * @param {Object} options - The plugin options.\n   * @returns {Boolean} `false` to cancel the chart datasets drawing.\n   */\n\n  /**\n   * @method IPlugin#afterDatasetsDraw\n   * @desc Called after the `chart` datasets have been drawn. Note that this hook\n   * will not be called if the datasets drawing has been previously cancelled.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#beforeEvent\n  \t * @desc Called before processing the specified `event`. If any plugin returns `false`,\n   * the event will be discarded.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {IEvent} event - The event object.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#afterEvent\n   * @desc Called after the `event` has been consumed. Note that this hook\n   * will not be called if the `event` has been previously discarded.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {IEvent} event - The event object.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#resize\n   * @desc Called after the chart as been resized.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Number} size - The new canvas display size (eq. canvas.style width & height).\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * @method IPlugin#destroy\n   * @desc Called after the chart as been destroyed.\n   * @param {Chart.Controller} chart - The chart instance.\n   * @param {Object} options - The plugin options.\n   */\n\n  /**\n   * Provided for backward compatibility, use Chart.plugins instead\n   * @namespace Chart.pluginService\n   * @deprecated since version 2.1.5\n   * @todo remove at version 3\n   * @private\n   */\n\n  Chart.pluginService = Chart.plugins;\n  /**\n   * Provided for backward compatibility, inheriting from Chart.PlugingBase has no\n   * effect, instead simply create/register plugins via plain JavaScript objects.\n   * @interface Chart.PluginBase\n   * @deprecated since version 2.5.0\n   * @todo remove at version 3\n   * @private\n   */\n\n  Chart.PluginBase = helpers.inherits({});\n};","map":{"version":3,"sources":["C:/Users/Kronos/Documents/Programming/Web/React/CS-3750-Project/ClientApp/node_modules/chart.js/src/core/core.plugin.js"],"names":["module","exports","Chart","helpers","defaults","global","plugins","_plugins","_cacheId","register","p","concat","forEach","plugin","indexOf","push","unregister","idx","splice","clear","count","length","getAll","notify","chart","hook","args","descriptors","ilen","i","descriptor","params","method","options","apply","cache","id","config","opts","clone","pluginService","PluginBase","inherits"],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\tChart.defaults.global.plugins = {};\n\n\t/**\n\t * The plugin service singleton\n\t * @namespace Chart.plugins\n\t * @since 2.1.0\n\t */\n\tChart.plugins = {\n\t\t/**\n\t\t * Globally registered plugins.\n\t\t * @private\n\t\t */\n\t\t_plugins: [],\n\n\t\t/**\n\t\t * This identifier is used to invalidate the descriptors cache attached to each chart\n\t\t * when a global plugin is registered or unregistered. In this case, the cache ID is\n\t\t * incremented and descriptors are regenerated during following API calls.\n\t\t * @private\n\t\t */\n\t\t_cacheId: 0,\n\n\t\t/**\n\t\t * Registers the given plugin(s) if not already registered.\n\t\t * @param {Array|Object} plugins plugin instance(s).\n\t\t */\n\t\tregister: function(plugins) {\n\t\t\tvar p = this._plugins;\n\t\t\t([]).concat(plugins).forEach(function(plugin) {\n\t\t\t\tif (p.indexOf(plugin) === -1) {\n\t\t\t\t\tp.push(plugin);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis._cacheId++;\n\t\t},\n\n\t\t/**\n\t\t * Unregisters the given plugin(s) only if registered.\n\t\t * @param {Array|Object} plugins plugin instance(s).\n\t\t */\n\t\tunregister: function(plugins) {\n\t\t\tvar p = this._plugins;\n\t\t\t([]).concat(plugins).forEach(function(plugin) {\n\t\t\t\tvar idx = p.indexOf(plugin);\n\t\t\t\tif (idx !== -1) {\n\t\t\t\t\tp.splice(idx, 1);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis._cacheId++;\n\t\t},\n\n\t\t/**\n\t\t * Remove all registered plugins.\n\t\t * @since 2.1.5\n\t\t */\n\t\tclear: function() {\n\t\t\tthis._plugins = [];\n\t\t\tthis._cacheId++;\n\t\t},\n\n\t\t/**\n\t\t * Returns the number of registered plugins?\n\t\t * @returns {Number}\n\t\t * @since 2.1.5\n\t\t */\n\t\tcount: function() {\n\t\t\treturn this._plugins.length;\n\t\t},\n\n\t\t/**\n\t\t * Returns all registered plugin instances.\n\t\t * @returns {Array} array of plugin objects.\n\t\t * @since 2.1.5\n\t\t */\n\t\tgetAll: function() {\n\t\t\treturn this._plugins;\n\t\t},\n\n\t\t/**\n\t\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t\t * returned value can be used, for instance, to interrupt the current action.\n\t\t * @param {Object} chart - The chart instance for which plugins should be called.\n\t\t * @param {String} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t\t * @param {Array} [args] - Extra arguments to apply to the hook call.\n\t\t * @returns {Boolean} false if any of the plugins return false, else returns true.\n\t\t */\n\t\tnotify: function(chart, hook, args) {\n\t\t\tvar descriptors = this.descriptors(chart);\n\t\t\tvar ilen = descriptors.length;\n\t\t\tvar i, descriptor, plugin, params, method;\n\n\t\t\tfor (i=0; i<ilen; ++i) {\n\t\t\t\tdescriptor = descriptors[i];\n\t\t\t\tplugin = descriptor.plugin;\n\t\t\t\tmethod = plugin[hook];\n\t\t\t\tif (typeof method === 'function') {\n\t\t\t\t\tparams = [chart].concat(args || []);\n\t\t\t\t\tparams.push(descriptor.options);\n\t\t\t\t\tif (method.apply(plugin, params) === false) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t/**\n\t\t * Returns descriptors of enabled plugins for the given chart.\n\t\t * @returns {Array} [{ plugin, options }]\n\t\t * @private\n\t\t */\n\t\tdescriptors: function(chart) {\n\t\t\tvar cache = chart._plugins || (chart._plugins = {});\n\t\t\tif (cache.id === this._cacheId) {\n\t\t\t\treturn cache.descriptors;\n\t\t\t}\n\n\t\t\tvar plugins = [];\n\t\t\tvar descriptors = [];\n\t\t\tvar config = (chart && chart.config) || {};\n\t\t\tvar defaults = Chart.defaults.global.plugins;\n\t\t\tvar options = (config.options && config.options.plugins) || {};\n\n\t\t\tthis._plugins.concat(config.plugins || []).forEach(function(plugin) {\n\t\t\t\tvar idx = plugins.indexOf(plugin);\n\t\t\t\tif (idx !== -1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar id = plugin.id;\n\t\t\t\tvar opts = options[id];\n\t\t\t\tif (opts === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opts === true) {\n\t\t\t\t\topts = helpers.clone(defaults[id]);\n\t\t\t\t}\n\n\t\t\t\tplugins.push(plugin);\n\t\t\t\tdescriptors.push({\n\t\t\t\t\tplugin: plugin,\n\t\t\t\t\toptions: opts || {}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tcache.descriptors = descriptors;\n\t\t\tcache.id = this._cacheId;\n\t\t\treturn descriptors;\n\t\t}\n\t};\n\n\t/**\n\t * Plugin extension hooks.\n\t * @interface IPlugin\n\t * @since 2.1.0\n\t */\n\t/**\n\t * @method IPlugin#beforeInit\n\t * @desc Called before initializing `chart`.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#afterInit\n\t * @desc Called after `chart` has been initialized and before the first update.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#beforeUpdate\n\t * @desc Called before updating `chart`. If any plugin returns `false`, the update\n\t * is cancelled (and thus subsequent render(s)) until another `update` is triggered.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t * @returns {Boolean} `false` to cancel the chart update.\n\t */\n\t/**\n\t * @method IPlugin#afterUpdate\n\t * @desc Called after `chart` has been updated and before rendering. Note that this\n\t * hook will not be called if the chart update has been previously cancelled.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#beforeDatasetsUpdate\n \t * @desc Called before updating the `chart` datasets. If any plugin returns `false`,\n\t * the datasets update is cancelled until another `update` is triggered.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t * @returns {Boolean} false to cancel the datasets update.\n\t * @since version 2.1.5\n\t */\n\t/**\n\t * @method IPlugin#afterDatasetsUpdate\n\t * @desc Called after the `chart` datasets have been updated. Note that this hook\n\t * will not be called if the datasets update has been previously cancelled.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t * @since version 2.1.5\n\t */\n\t/**\n\t * @method IPlugin#beforeLayout\n\t * @desc Called before laying out `chart`. If any plugin returns `false`,\n\t * the layout update is cancelled until another `update` is triggered.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t * @returns {Boolean} `false` to cancel the chart layout.\n\t */\n\t/**\n\t * @method IPlugin#afterLayout\n\t * @desc Called after the `chart` has been layed out. Note that this hook will not\n\t * be called if the layout update has been previously cancelled.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#beforeRender\n\t * @desc Called before rendering `chart`. If any plugin returns `false`,\n\t * the rendering is cancelled until another `render` is triggered.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t * @returns {Boolean} `false` to cancel the chart rendering.\n\t */\n\t/**\n\t * @method IPlugin#afterRender\n\t * @desc Called after the `chart` has been fully rendered (and animation completed). Note\n\t * that this hook will not be called if the rendering has been previously cancelled.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#beforeDraw\n\t * @desc Called before drawing `chart` at every animation frame specified by the given\n\t * easing value. If any plugin returns `false`, the frame drawing is cancelled until\n\t * another `render` is triggered.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n\t * @param {Object} options - The plugin options.\n\t * @returns {Boolean} `false` to cancel the chart drawing.\n\t */\n\t/**\n\t * @method IPlugin#afterDraw\n\t * @desc Called after the `chart` has been drawn for the specific easing value. Note\n\t * that this hook will not be called if the drawing has been previously cancelled.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#beforeDatasetsDraw\n \t * @desc Called before drawing the `chart` datasets. If any plugin returns `false`,\n\t * the datasets drawing is cancelled until another `render` is triggered.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n\t * @param {Object} options - The plugin options.\n\t * @returns {Boolean} `false` to cancel the chart datasets drawing.\n\t */\n\t/**\n\t * @method IPlugin#afterDatasetsDraw\n\t * @desc Called after the `chart` datasets have been drawn. Note that this hook\n\t * will not be called if the datasets drawing has been previously cancelled.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#beforeEvent\n \t * @desc Called before processing the specified `event`. If any plugin returns `false`,\n\t * the event will be discarded.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {IEvent} event - The event object.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#afterEvent\n\t * @desc Called after the `event` has been consumed. Note that this hook\n\t * will not be called if the `event` has been previously discarded.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {IEvent} event - The event object.\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#resize\n\t * @desc Called after the chart as been resized.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Number} size - The new canvas display size (eq. canvas.style width & height).\n\t * @param {Object} options - The plugin options.\n\t */\n\t/**\n\t * @method IPlugin#destroy\n\t * @desc Called after the chart as been destroyed.\n\t * @param {Chart.Controller} chart - The chart instance.\n\t * @param {Object} options - The plugin options.\n\t */\n\n\t/**\n\t * Provided for backward compatibility, use Chart.plugins instead\n\t * @namespace Chart.pluginService\n\t * @deprecated since version 2.1.5\n\t * @todo remove at version 3\n\t * @private\n\t */\n\tChart.pluginService = Chart.plugins;\n\n\t/**\n\t * Provided for backward compatibility, inheriting from Chart.PlugingBase has no\n\t * effect, instead simply create/register plugins via plain JavaScript objects.\n\t * @interface Chart.PluginBase\n\t * @deprecated since version 2.5.0\n\t * @todo remove at version 3\n\t * @private\n\t */\n\tChart.PluginBase = helpers.inherits({});\n};\n"]},"metadata":{},"sourceType":"script"}