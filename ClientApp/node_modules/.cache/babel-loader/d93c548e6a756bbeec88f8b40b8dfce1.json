{"ast":null,"code":"'use strict';\n\nmodule.exports = function (Chart) {\n  var helpers = Chart.helpers; // The layout service is very self explanatory.  It's responsible for the layout within a chart.\n  // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n  // It is this service's responsibility of carrying out that layout.\n\n  Chart.layoutService = {\n    defaults: {},\n    // Register a box to a chartInstance. A box is simply a reference to an object that requires layout. eg. Scales, Legend, Plugins.\n    addBox: function (chartInstance, box) {\n      if (!chartInstance.boxes) {\n        chartInstance.boxes = [];\n      }\n\n      chartInstance.boxes.push(box);\n    },\n    removeBox: function (chartInstance, box) {\n      if (!chartInstance.boxes) {\n        return;\n      }\n\n      chartInstance.boxes.splice(chartInstance.boxes.indexOf(box), 1);\n    },\n    // The most important function\n    update: function (chartInstance, width, height) {\n      if (!chartInstance) {\n        return;\n      }\n\n      var layoutOptions = chartInstance.options.layout;\n      var padding = layoutOptions ? layoutOptions.padding : null;\n      var leftPadding = 0;\n      var rightPadding = 0;\n      var topPadding = 0;\n      var bottomPadding = 0;\n\n      if (!isNaN(padding)) {\n        // options.layout.padding is a number. assign to all\n        leftPadding = padding;\n        rightPadding = padding;\n        topPadding = padding;\n        bottomPadding = padding;\n      } else {\n        leftPadding = padding.left || 0;\n        rightPadding = padding.right || 0;\n        topPadding = padding.top || 0;\n        bottomPadding = padding.bottom || 0;\n      }\n\n      var leftBoxes = helpers.where(chartInstance.boxes, function (box) {\n        return box.options.position === 'left';\n      });\n      var rightBoxes = helpers.where(chartInstance.boxes, function (box) {\n        return box.options.position === 'right';\n      });\n      var topBoxes = helpers.where(chartInstance.boxes, function (box) {\n        return box.options.position === 'top';\n      });\n      var bottomBoxes = helpers.where(chartInstance.boxes, function (box) {\n        return box.options.position === 'bottom';\n      }); // Boxes that overlay the chartarea such as the radialLinear scale\n\n      var chartAreaBoxes = helpers.where(chartInstance.boxes, function (box) {\n        return box.options.position === 'chartArea';\n      }); // Ensure that full width boxes are at the very top / bottom\n\n      topBoxes.sort(function (a, b) {\n        return (b.options.fullWidth ? 1 : 0) - (a.options.fullWidth ? 1 : 0);\n      });\n      bottomBoxes.sort(function (a, b) {\n        return (a.options.fullWidth ? 1 : 0) - (b.options.fullWidth ? 1 : 0);\n      }); // Essentially we now have any number of boxes on each of the 4 sides.\n      // Our canvas looks like the following.\n      // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n      // B1 is the bottom axis\n      // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n      // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n      // an error will be thrown.\n      //\n      // |----------------------------------------------------|\n      // |                  T1 (Full Width)                   |\n      // |----------------------------------------------------|\n      // |    |    |                 T2                  |    |\n      // |    |----|-------------------------------------|----|\n      // |    |    | C1 |                           | C2 |    |\n      // |    |    |----|                           |----|    |\n      // |    |    |                                     |    |\n      // | L1 | L2 |           ChartArea (C0)            | R1 |\n      // |    |    |                                     |    |\n      // |    |    |----|                           |----|    |\n      // |    |    | C3 |                           | C4 |    |\n      // |    |----|-------------------------------------|----|\n      // |    |    |                 B1                  |    |\n      // |----------------------------------------------------|\n      // |                  B2 (Full Width)                   |\n      // |----------------------------------------------------|\n      //\n      // What we do to find the best sizing, we do the following\n      // 1. Determine the minimum size of the chart area.\n      // 2. Split the remaining width equally between each vertical axis\n      // 3. Split the remaining height equally between each horizontal axis\n      // 4. Give each layout the maximum size it can be. The layout will return it's minimum size\n      // 5. Adjust the sizes of each axis based on it's minimum reported size.\n      // 6. Refit each axis\n      // 7. Position each axis in the final location\n      // 8. Tell the chart the final location of the chart area\n      // 9. Tell any axes that overlay the chart area the positions of the chart area\n      // Step 1\n\n      var chartWidth = width - leftPadding - rightPadding;\n      var chartHeight = height - topPadding - bottomPadding;\n      var chartAreaWidth = chartWidth / 2; // min 50%\n\n      var chartAreaHeight = chartHeight / 2; // min 50%\n      // Step 2\n\n      var verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length); // Step 3\n\n      var horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length); // Step 4\n\n      var maxChartAreaWidth = chartWidth;\n      var maxChartAreaHeight = chartHeight;\n      var minBoxSizes = [];\n\n      function getMinimumBoxSize(box) {\n        var minSize;\n        var isHorizontal = box.isHorizontal();\n\n        if (isHorizontal) {\n          minSize = box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);\n          maxChartAreaHeight -= minSize.height;\n        } else {\n          minSize = box.update(verticalBoxWidth, chartAreaHeight);\n          maxChartAreaWidth -= minSize.width;\n        }\n\n        minBoxSizes.push({\n          horizontal: isHorizontal,\n          minSize: minSize,\n          box: box\n        });\n      }\n\n      helpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize); // If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)\n\n      var maxHorizontalLeftPadding = 0;\n      var maxHorizontalRightPadding = 0;\n      var maxVerticalTopPadding = 0;\n      var maxVerticalBottomPadding = 0;\n      helpers.each(topBoxes.concat(bottomBoxes), function (horizontalBox) {\n        if (horizontalBox.getPadding) {\n          var boxPadding = horizontalBox.getPadding();\n          maxHorizontalLeftPadding = Math.max(maxHorizontalLeftPadding, boxPadding.left);\n          maxHorizontalRightPadding = Math.max(maxHorizontalRightPadding, boxPadding.right);\n        }\n      });\n      helpers.each(leftBoxes.concat(rightBoxes), function (verticalBox) {\n        if (verticalBox.getPadding) {\n          var boxPadding = verticalBox.getPadding();\n          maxVerticalTopPadding = Math.max(maxVerticalTopPadding, boxPadding.top);\n          maxVerticalBottomPadding = Math.max(maxVerticalBottomPadding, boxPadding.bottom);\n        }\n      }); // At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could\n      // be if the axes are drawn at their minimum sizes.\n      // Steps 5 & 6\n\n      var totalLeftBoxesWidth = leftPadding;\n      var totalRightBoxesWidth = rightPadding;\n      var totalTopBoxesHeight = topPadding;\n      var totalBottomBoxesHeight = bottomPadding; // Function to fit a box\n\n      function fitBox(box) {\n        var minBoxSize = helpers.findNextWhere(minBoxSizes, function (minBox) {\n          return minBox.box === box;\n        });\n\n        if (minBoxSize) {\n          if (box.isHorizontal()) {\n            var scaleMargin = {\n              left: Math.max(totalLeftBoxesWidth, maxHorizontalLeftPadding),\n              right: Math.max(totalRightBoxesWidth, maxHorizontalRightPadding),\n              top: 0,\n              bottom: 0\n            }; // Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends\n            // on the margin. Sometimes they need to increase in size slightly\n\n            box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);\n          } else {\n            box.update(minBoxSize.minSize.width, maxChartAreaHeight);\n          }\n        }\n      } // Update, and calculate the left and right margins for the horizontal boxes\n\n\n      helpers.each(leftBoxes.concat(rightBoxes), fitBox);\n      helpers.each(leftBoxes, function (box) {\n        totalLeftBoxesWidth += box.width;\n      });\n      helpers.each(rightBoxes, function (box) {\n        totalRightBoxesWidth += box.width;\n      }); // Set the Left and Right margins for the horizontal boxes\n\n      helpers.each(topBoxes.concat(bottomBoxes), fitBox); // Figure out how much margin is on the top and bottom of the vertical boxes\n\n      helpers.each(topBoxes, function (box) {\n        totalTopBoxesHeight += box.height;\n      });\n      helpers.each(bottomBoxes, function (box) {\n        totalBottomBoxesHeight += box.height;\n      });\n\n      function finalFitVerticalBox(box) {\n        var minBoxSize = helpers.findNextWhere(minBoxSizes, function (minSize) {\n          return minSize.box === box;\n        });\n        var scaleMargin = {\n          left: 0,\n          right: 0,\n          top: totalTopBoxesHeight,\n          bottom: totalBottomBoxesHeight\n        };\n\n        if (minBoxSize) {\n          box.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);\n        }\n      } // Let the left layout know the final margin\n\n\n      helpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox); // Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)\n\n      totalLeftBoxesWidth = leftPadding;\n      totalRightBoxesWidth = rightPadding;\n      totalTopBoxesHeight = topPadding;\n      totalBottomBoxesHeight = bottomPadding;\n      helpers.each(leftBoxes, function (box) {\n        totalLeftBoxesWidth += box.width;\n      });\n      helpers.each(rightBoxes, function (box) {\n        totalRightBoxesWidth += box.width;\n      });\n      helpers.each(topBoxes, function (box) {\n        totalTopBoxesHeight += box.height;\n      });\n      helpers.each(bottomBoxes, function (box) {\n        totalBottomBoxesHeight += box.height;\n      }); // We may be adding some padding to account for rotated x axis labels\n\n      var leftPaddingAddition = Math.max(maxHorizontalLeftPadding - totalLeftBoxesWidth, 0);\n      totalLeftBoxesWidth += leftPaddingAddition;\n      totalRightBoxesWidth += Math.max(maxHorizontalRightPadding - totalRightBoxesWidth, 0);\n      var topPaddingAddition = Math.max(maxVerticalTopPadding - totalTopBoxesHeight, 0);\n      totalTopBoxesHeight += topPaddingAddition;\n      totalBottomBoxesHeight += Math.max(maxVerticalBottomPadding - totalBottomBoxesHeight, 0); // Figure out if our chart area changed. This would occur if the dataset layout label rotation\n      // changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do\n      // without calling `fit` again\n\n      var newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;\n      var newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;\n\n      if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {\n        helpers.each(leftBoxes, function (box) {\n          box.height = newMaxChartAreaHeight;\n        });\n        helpers.each(rightBoxes, function (box) {\n          box.height = newMaxChartAreaHeight;\n        });\n        helpers.each(topBoxes, function (box) {\n          if (!box.options.fullWidth) {\n            box.width = newMaxChartAreaWidth;\n          }\n        });\n        helpers.each(bottomBoxes, function (box) {\n          if (!box.options.fullWidth) {\n            box.width = newMaxChartAreaWidth;\n          }\n        });\n        maxChartAreaHeight = newMaxChartAreaHeight;\n        maxChartAreaWidth = newMaxChartAreaWidth;\n      } // Step 7 - Position the boxes\n\n\n      var left = leftPadding + leftPaddingAddition;\n      var top = topPadding + topPaddingAddition;\n\n      function placeBox(box) {\n        if (box.isHorizontal()) {\n          box.left = box.options.fullWidth ? leftPadding : totalLeftBoxesWidth;\n          box.right = box.options.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;\n          box.top = top;\n          box.bottom = top + box.height; // Move to next point\n\n          top = box.bottom;\n        } else {\n          box.left = left;\n          box.right = left + box.width;\n          box.top = totalTopBoxesHeight;\n          box.bottom = totalTopBoxesHeight + maxChartAreaHeight; // Move to next point\n\n          left = box.right;\n        }\n      }\n\n      helpers.each(leftBoxes.concat(topBoxes), placeBox); // Account for chart width and height\n\n      left += maxChartAreaWidth;\n      top += maxChartAreaHeight;\n      helpers.each(rightBoxes, placeBox);\n      helpers.each(bottomBoxes, placeBox); // Step 8\n\n      chartInstance.chartArea = {\n        left: totalLeftBoxesWidth,\n        top: totalTopBoxesHeight,\n        right: totalLeftBoxesWidth + maxChartAreaWidth,\n        bottom: totalTopBoxesHeight + maxChartAreaHeight\n      }; // Step 9\n\n      helpers.each(chartAreaBoxes, function (box) {\n        box.left = chartInstance.chartArea.left;\n        box.top = chartInstance.chartArea.top;\n        box.right = chartInstance.chartArea.right;\n        box.bottom = chartInstance.chartArea.bottom;\n        box.update(maxChartAreaWidth, maxChartAreaHeight);\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Kronos/Documents/Programming/Web/React/CS-3750-Project/ClientApp/node_modules/chart.js/src/core/core.layoutService.js"],"names":["module","exports","Chart","helpers","layoutService","defaults","addBox","chartInstance","box","boxes","push","removeBox","splice","indexOf","update","width","height","layoutOptions","options","layout","padding","leftPadding","rightPadding","topPadding","bottomPadding","isNaN","left","right","top","bottom","leftBoxes","where","position","rightBoxes","topBoxes","bottomBoxes","chartAreaBoxes","sort","a","b","fullWidth","chartWidth","chartHeight","chartAreaWidth","chartAreaHeight","verticalBoxWidth","length","horizontalBoxHeight","maxChartAreaWidth","maxChartAreaHeight","minBoxSizes","getMinimumBoxSize","minSize","isHorizontal","horizontal","each","concat","maxHorizontalLeftPadding","maxHorizontalRightPadding","maxVerticalTopPadding","maxVerticalBottomPadding","horizontalBox","getPadding","boxPadding","Math","max","verticalBox","totalLeftBoxesWidth","totalRightBoxesWidth","totalTopBoxesHeight","totalBottomBoxesHeight","fitBox","minBoxSize","findNextWhere","minBox","scaleMargin","finalFitVerticalBox","leftPaddingAddition","topPaddingAddition","newMaxChartAreaHeight","newMaxChartAreaWidth","placeBox","chartArea"],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\t// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n\t// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n\t// It is this service's responsibility of carrying out that layout.\n\tChart.layoutService = {\n\t\tdefaults: {},\n\n\t\t// Register a box to a chartInstance. A box is simply a reference to an object that requires layout. eg. Scales, Legend, Plugins.\n\t\taddBox: function(chartInstance, box) {\n\t\t\tif (!chartInstance.boxes) {\n\t\t\t\tchartInstance.boxes = [];\n\t\t\t}\n\t\t\tchartInstance.boxes.push(box);\n\t\t},\n\n\t\tremoveBox: function(chartInstance, box) {\n\t\t\tif (!chartInstance.boxes) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tchartInstance.boxes.splice(chartInstance.boxes.indexOf(box), 1);\n\t\t},\n\n\t\t// The most important function\n\t\tupdate: function(chartInstance, width, height) {\n\n\t\t\tif (!chartInstance) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar layoutOptions = chartInstance.options.layout;\n\t\t\tvar padding = layoutOptions ? layoutOptions.padding : null;\n\n\t\t\tvar leftPadding = 0;\n\t\t\tvar rightPadding = 0;\n\t\t\tvar topPadding = 0;\n\t\t\tvar bottomPadding = 0;\n\n\t\t\tif (!isNaN(padding)) {\n\t\t\t\t// options.layout.padding is a number. assign to all\n\t\t\t\tleftPadding = padding;\n\t\t\t\trightPadding = padding;\n\t\t\t\ttopPadding = padding;\n\t\t\t\tbottomPadding = padding;\n\t\t\t} else {\n\t\t\t\tleftPadding = padding.left || 0;\n\t\t\t\trightPadding = padding.right || 0;\n\t\t\t\ttopPadding = padding.top || 0;\n\t\t\t\tbottomPadding = padding.bottom || 0;\n\t\t\t}\n\n\t\t\tvar leftBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\treturn box.options.position === 'left';\n\t\t\t});\n\t\t\tvar rightBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\treturn box.options.position === 'right';\n\t\t\t});\n\t\t\tvar topBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\treturn box.options.position === 'top';\n\t\t\t});\n\t\t\tvar bottomBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\treturn box.options.position === 'bottom';\n\t\t\t});\n\n\t\t\t// Boxes that overlay the chartarea such as the radialLinear scale\n\t\t\tvar chartAreaBoxes = helpers.where(chartInstance.boxes, function(box) {\n\t\t\t\treturn box.options.position === 'chartArea';\n\t\t\t});\n\n\t\t\t// Ensure that full width boxes are at the very top / bottom\n\t\t\ttopBoxes.sort(function(a, b) {\n\t\t\t\treturn (b.options.fullWidth ? 1 : 0) - (a.options.fullWidth ? 1 : 0);\n\t\t\t});\n\t\t\tbottomBoxes.sort(function(a, b) {\n\t\t\t\treturn (a.options.fullWidth ? 1 : 0) - (b.options.fullWidth ? 1 : 0);\n\t\t\t});\n\n\t\t\t// Essentially we now have any number of boxes on each of the 4 sides.\n\t\t\t// Our canvas looks like the following.\n\t\t\t// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n\t\t\t// B1 is the bottom axis\n\t\t\t// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n\t\t\t// These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n\t\t\t// an error will be thrown.\n\t\t\t//\n\t\t\t// |----------------------------------------------------|\n\t\t\t// |                  T1 (Full Width)                   |\n\t\t\t// |----------------------------------------------------|\n\t\t\t// |    |    |                 T2                  |    |\n\t\t\t// |    |----|-------------------------------------|----|\n\t\t\t// |    |    | C1 |                           | C2 |    |\n\t\t\t// |    |    |----|                           |----|    |\n\t\t\t// |    |    |                                     |    |\n\t\t\t// | L1 | L2 |           ChartArea (C0)            | R1 |\n\t\t\t// |    |    |                                     |    |\n\t\t\t// |    |    |----|                           |----|    |\n\t\t\t// |    |    | C3 |                           | C4 |    |\n\t\t\t// |    |----|-------------------------------------|----|\n\t\t\t// |    |    |                 B1                  |    |\n\t\t\t// |----------------------------------------------------|\n\t\t\t// |                  B2 (Full Width)                   |\n\t\t\t// |----------------------------------------------------|\n\t\t\t//\n\t\t\t// What we do to find the best sizing, we do the following\n\t\t\t// 1. Determine the minimum size of the chart area.\n\t\t\t// 2. Split the remaining width equally between each vertical axis\n\t\t\t// 3. Split the remaining height equally between each horizontal axis\n\t\t\t// 4. Give each layout the maximum size it can be. The layout will return it's minimum size\n\t\t\t// 5. Adjust the sizes of each axis based on it's minimum reported size.\n\t\t\t// 6. Refit each axis\n\t\t\t// 7. Position each axis in the final location\n\t\t\t// 8. Tell the chart the final location of the chart area\n\t\t\t// 9. Tell any axes that overlay the chart area the positions of the chart area\n\n\t\t\t// Step 1\n\t\t\tvar chartWidth = width - leftPadding - rightPadding;\n\t\t\tvar chartHeight = height - topPadding - bottomPadding;\n\t\t\tvar chartAreaWidth = chartWidth / 2; // min 50%\n\t\t\tvar chartAreaHeight = chartHeight / 2; // min 50%\n\n\t\t\t// Step 2\n\t\t\tvar verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length);\n\n\t\t\t// Step 3\n\t\t\tvar horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length);\n\n\t\t\t// Step 4\n\t\t\tvar maxChartAreaWidth = chartWidth;\n\t\t\tvar maxChartAreaHeight = chartHeight;\n\t\t\tvar minBoxSizes = [];\n\n\t\t\tfunction getMinimumBoxSize(box) {\n\t\t\t\tvar minSize;\n\t\t\t\tvar isHorizontal = box.isHorizontal();\n\n\t\t\t\tif (isHorizontal) {\n\t\t\t\t\tminSize = box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);\n\t\t\t\t\tmaxChartAreaHeight -= minSize.height;\n\t\t\t\t} else {\n\t\t\t\t\tminSize = box.update(verticalBoxWidth, chartAreaHeight);\n\t\t\t\t\tmaxChartAreaWidth -= minSize.width;\n\t\t\t\t}\n\n\t\t\t\tminBoxSizes.push({\n\t\t\t\t\thorizontal: isHorizontal,\n\t\t\t\t\tminSize: minSize,\n\t\t\t\t\tbox: box,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\thelpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize);\n\n\t\t\t// If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)\n\t\t\tvar maxHorizontalLeftPadding = 0;\n\t\t\tvar maxHorizontalRightPadding = 0;\n\t\t\tvar maxVerticalTopPadding = 0;\n\t\t\tvar maxVerticalBottomPadding = 0;\n\n\t\t\thelpers.each(topBoxes.concat(bottomBoxes), function(horizontalBox) {\n\t\t\t\tif (horizontalBox.getPadding) {\n\t\t\t\t\tvar boxPadding = horizontalBox.getPadding();\n\t\t\t\t\tmaxHorizontalLeftPadding = Math.max(maxHorizontalLeftPadding, boxPadding.left);\n\t\t\t\t\tmaxHorizontalRightPadding = Math.max(maxHorizontalRightPadding, boxPadding.right);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\thelpers.each(leftBoxes.concat(rightBoxes), function(verticalBox) {\n\t\t\t\tif (verticalBox.getPadding) {\n\t\t\t\t\tvar boxPadding = verticalBox.getPadding();\n\t\t\t\t\tmaxVerticalTopPadding = Math.max(maxVerticalTopPadding, boxPadding.top);\n\t\t\t\t\tmaxVerticalBottomPadding = Math.max(maxVerticalBottomPadding, boxPadding.bottom);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could\n\t\t\t// be if the axes are drawn at their minimum sizes.\n\t\t\t// Steps 5 & 6\n\t\t\tvar totalLeftBoxesWidth = leftPadding;\n\t\t\tvar totalRightBoxesWidth = rightPadding;\n\t\t\tvar totalTopBoxesHeight = topPadding;\n\t\t\tvar totalBottomBoxesHeight = bottomPadding;\n\n\t\t\t// Function to fit a box\n\t\t\tfunction fitBox(box) {\n\t\t\t\tvar minBoxSize = helpers.findNextWhere(minBoxSizes, function(minBox) {\n\t\t\t\t\treturn minBox.box === box;\n\t\t\t\t});\n\n\t\t\t\tif (minBoxSize) {\n\t\t\t\t\tif (box.isHorizontal()) {\n\t\t\t\t\t\tvar scaleMargin = {\n\t\t\t\t\t\t\tleft: Math.max(totalLeftBoxesWidth, maxHorizontalLeftPadding),\n\t\t\t\t\t\t\tright: Math.max(totalRightBoxesWidth, maxHorizontalRightPadding),\n\t\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\t\tbottom: 0\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends\n\t\t\t\t\t\t// on the margin. Sometimes they need to increase in size slightly\n\t\t\t\t\t\tbox.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbox.update(minBoxSize.minSize.width, maxChartAreaHeight);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update, and calculate the left and right margins for the horizontal boxes\n\t\t\thelpers.each(leftBoxes.concat(rightBoxes), fitBox);\n\n\t\t\thelpers.each(leftBoxes, function(box) {\n\t\t\t\ttotalLeftBoxesWidth += box.width;\n\t\t\t});\n\n\t\t\thelpers.each(rightBoxes, function(box) {\n\t\t\t\ttotalRightBoxesWidth += box.width;\n\t\t\t});\n\n\t\t\t// Set the Left and Right margins for the horizontal boxes\n\t\t\thelpers.each(topBoxes.concat(bottomBoxes), fitBox);\n\n\t\t\t// Figure out how much margin is on the top and bottom of the vertical boxes\n\t\t\thelpers.each(topBoxes, function(box) {\n\t\t\t\ttotalTopBoxesHeight += box.height;\n\t\t\t});\n\n\t\t\thelpers.each(bottomBoxes, function(box) {\n\t\t\t\ttotalBottomBoxesHeight += box.height;\n\t\t\t});\n\n\t\t\tfunction finalFitVerticalBox(box) {\n\t\t\t\tvar minBoxSize = helpers.findNextWhere(minBoxSizes, function(minSize) {\n\t\t\t\t\treturn minSize.box === box;\n\t\t\t\t});\n\n\t\t\t\tvar scaleMargin = {\n\t\t\t\t\tleft: 0,\n\t\t\t\t\tright: 0,\n\t\t\t\t\ttop: totalTopBoxesHeight,\n\t\t\t\t\tbottom: totalBottomBoxesHeight\n\t\t\t\t};\n\n\t\t\t\tif (minBoxSize) {\n\t\t\t\t\tbox.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Let the left layout know the final margin\n\t\t\thelpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox);\n\n\t\t\t// Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)\n\t\t\ttotalLeftBoxesWidth = leftPadding;\n\t\t\ttotalRightBoxesWidth = rightPadding;\n\t\t\ttotalTopBoxesHeight = topPadding;\n\t\t\ttotalBottomBoxesHeight = bottomPadding;\n\n\t\t\thelpers.each(leftBoxes, function(box) {\n\t\t\t\ttotalLeftBoxesWidth += box.width;\n\t\t\t});\n\n\t\t\thelpers.each(rightBoxes, function(box) {\n\t\t\t\ttotalRightBoxesWidth += box.width;\n\t\t\t});\n\n\t\t\thelpers.each(topBoxes, function(box) {\n\t\t\t\ttotalTopBoxesHeight += box.height;\n\t\t\t});\n\t\t\thelpers.each(bottomBoxes, function(box) {\n\t\t\t\ttotalBottomBoxesHeight += box.height;\n\t\t\t});\n\n\t\t\t// We may be adding some padding to account for rotated x axis labels\n\t\t\tvar leftPaddingAddition = Math.max(maxHorizontalLeftPadding - totalLeftBoxesWidth, 0);\n\t\t\ttotalLeftBoxesWidth += leftPaddingAddition;\n\t\t\ttotalRightBoxesWidth += Math.max(maxHorizontalRightPadding - totalRightBoxesWidth, 0);\n\n\t\t\tvar topPaddingAddition = Math.max(maxVerticalTopPadding - totalTopBoxesHeight, 0);\n\t\t\ttotalTopBoxesHeight += topPaddingAddition;\n\t\t\ttotalBottomBoxesHeight += Math.max(maxVerticalBottomPadding - totalBottomBoxesHeight, 0);\n\n\t\t\t// Figure out if our chart area changed. This would occur if the dataset layout label rotation\n\t\t\t// changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do\n\t\t\t// without calling `fit` again\n\t\t\tvar newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;\n\t\t\tvar newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;\n\n\t\t\tif (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {\n\t\t\t\thelpers.each(leftBoxes, function(box) {\n\t\t\t\t\tbox.height = newMaxChartAreaHeight;\n\t\t\t\t});\n\n\t\t\t\thelpers.each(rightBoxes, function(box) {\n\t\t\t\t\tbox.height = newMaxChartAreaHeight;\n\t\t\t\t});\n\n\t\t\t\thelpers.each(topBoxes, function(box) {\n\t\t\t\t\tif (!box.options.fullWidth) {\n\t\t\t\t\t\tbox.width = newMaxChartAreaWidth;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\thelpers.each(bottomBoxes, function(box) {\n\t\t\t\t\tif (!box.options.fullWidth) {\n\t\t\t\t\t\tbox.width = newMaxChartAreaWidth;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmaxChartAreaHeight = newMaxChartAreaHeight;\n\t\t\t\tmaxChartAreaWidth = newMaxChartAreaWidth;\n\t\t\t}\n\n\t\t\t// Step 7 - Position the boxes\n\t\t\tvar left = leftPadding + leftPaddingAddition;\n\t\t\tvar top = topPadding + topPaddingAddition;\n\n\t\t\tfunction placeBox(box) {\n\t\t\t\tif (box.isHorizontal()) {\n\t\t\t\t\tbox.left = box.options.fullWidth ? leftPadding : totalLeftBoxesWidth;\n\t\t\t\t\tbox.right = box.options.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;\n\t\t\t\t\tbox.top = top;\n\t\t\t\t\tbox.bottom = top + box.height;\n\n\t\t\t\t\t// Move to next point\n\t\t\t\t\ttop = box.bottom;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbox.left = left;\n\t\t\t\t\tbox.right = left + box.width;\n\t\t\t\t\tbox.top = totalTopBoxesHeight;\n\t\t\t\t\tbox.bottom = totalTopBoxesHeight + maxChartAreaHeight;\n\n\t\t\t\t\t// Move to next point\n\t\t\t\t\tleft = box.right;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thelpers.each(leftBoxes.concat(topBoxes), placeBox);\n\n\t\t\t// Account for chart width and height\n\t\t\tleft += maxChartAreaWidth;\n\t\t\ttop += maxChartAreaHeight;\n\n\t\t\thelpers.each(rightBoxes, placeBox);\n\t\t\thelpers.each(bottomBoxes, placeBox);\n\n\t\t\t// Step 8\n\t\t\tchartInstance.chartArea = {\n\t\t\t\tleft: totalLeftBoxesWidth,\n\t\t\t\ttop: totalTopBoxesHeight,\n\t\t\t\tright: totalLeftBoxesWidth + maxChartAreaWidth,\n\t\t\t\tbottom: totalTopBoxesHeight + maxChartAreaHeight\n\t\t\t};\n\n\t\t\t// Step 9\n\t\t\thelpers.each(chartAreaBoxes, function(box) {\n\t\t\t\tbox.left = chartInstance.chartArea.left;\n\t\t\t\tbox.top = chartInstance.chartArea.top;\n\t\t\t\tbox.right = chartInstance.chartArea.right;\n\t\t\t\tbox.bottom = chartInstance.chartArea.bottom;\n\n\t\t\t\tbox.update(maxChartAreaWidth, maxChartAreaHeight);\n\t\t\t});\n\t\t}\n\t};\n};\n"]},"metadata":{},"sourceType":"script"}