{"ast":null,"code":"'use strict';\n\nmodule.exports = function (Chart) {\n  var helpers = Chart.helpers;\n  Chart.scaleService = {\n    // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n    // use the new chart options to grab the correct scale\n    constructors: {},\n    // Use a registration function so that we can move to an ES6 map when we no longer need to support\n    // old browsers\n    // Scale config defaults\n    defaults: {},\n    registerScaleType: function (type, scaleConstructor, defaults) {\n      this.constructors[type] = scaleConstructor;\n      this.defaults[type] = helpers.clone(defaults);\n    },\n    getScaleConstructor: function (type) {\n      return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n    },\n    getScaleDefaults: function (type) {\n      // Return the scale defaults merged with the global settings so that we always use the latest ones\n      return this.defaults.hasOwnProperty(type) ? helpers.scaleMerge(Chart.defaults.scale, this.defaults[type]) : {};\n    },\n    updateScaleDefaults: function (type, additions) {\n      var defaults = this.defaults;\n\n      if (defaults.hasOwnProperty(type)) {\n        defaults[type] = helpers.extend(defaults[type], additions);\n      }\n    },\n    addScalesToLayout: function (chartInstance) {\n      // Adds each scale to the chart.boxes array to be sized accordingly\n      helpers.each(chartInstance.scales, function (scale) {\n        Chart.layoutService.addBox(chartInstance, scale);\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Kronos/Documents/Programming/Web/React/CS-3750-Project/ClientApp/node_modules/chart.js/src/core/core.scaleService.js"],"names":["module","exports","Chart","helpers","scaleService","constructors","defaults","registerScaleType","type","scaleConstructor","clone","getScaleConstructor","hasOwnProperty","undefined","getScaleDefaults","scaleMerge","scale","updateScaleDefaults","additions","extend","addScalesToLayout","chartInstance","each","scales","layoutService","addBox"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,UAASC,KAAT,EAAgB;AAEhC,MAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAEAD,EAAAA,KAAK,CAACE,YAAN,GAAqB;AACpB;AACA;AACAC,IAAAA,YAAY,EAAE,EAHM;AAIpB;AACA;AAEA;AACAC,IAAAA,QAAQ,EAAE,EARU;AASpBC,IAAAA,iBAAiB,EAAE,UAASC,IAAT,EAAeC,gBAAf,EAAiCH,QAAjC,EAA2C;AAC7D,WAAKD,YAAL,CAAkBG,IAAlB,IAA0BC,gBAA1B;AACA,WAAKH,QAAL,CAAcE,IAAd,IAAsBL,OAAO,CAACO,KAAR,CAAcJ,QAAd,CAAtB;AACA,KAZmB;AAapBK,IAAAA,mBAAmB,EAAE,UAASH,IAAT,EAAe;AACnC,aAAO,KAAKH,YAAL,CAAkBO,cAAlB,CAAiCJ,IAAjC,IAAyC,KAAKH,YAAL,CAAkBG,IAAlB,CAAzC,GAAmEK,SAA1E;AACA,KAfmB;AAgBpBC,IAAAA,gBAAgB,EAAE,UAASN,IAAT,EAAe;AAChC;AACA,aAAO,KAAKF,QAAL,CAAcM,cAAd,CAA6BJ,IAA7B,IAAqCL,OAAO,CAACY,UAAR,CAAmBb,KAAK,CAACI,QAAN,CAAeU,KAAlC,EAAyC,KAAKV,QAAL,CAAcE,IAAd,CAAzC,CAArC,GAAqG,EAA5G;AACA,KAnBmB;AAoBpBS,IAAAA,mBAAmB,EAAE,UAAST,IAAT,EAAeU,SAAf,EAA0B;AAC9C,UAAIZ,QAAQ,GAAG,KAAKA,QAApB;;AACA,UAAIA,QAAQ,CAACM,cAAT,CAAwBJ,IAAxB,CAAJ,EAAmC;AAClCF,QAAAA,QAAQ,CAACE,IAAD,CAAR,GAAiBL,OAAO,CAACgB,MAAR,CAAeb,QAAQ,CAACE,IAAD,CAAvB,EAA+BU,SAA/B,CAAjB;AACA;AACD,KAzBmB;AA0BpBE,IAAAA,iBAAiB,EAAE,UAASC,aAAT,EAAwB;AAC1C;AACAlB,MAAAA,OAAO,CAACmB,IAAR,CAAaD,aAAa,CAACE,MAA3B,EAAmC,UAASP,KAAT,EAAgB;AAClDd,QAAAA,KAAK,CAACsB,aAAN,CAAoBC,MAApB,CAA2BJ,aAA3B,EAA0CL,KAA1C;AACA,OAFD;AAGA;AA/BmB,GAArB;AAiCA,CArCD","sourcesContent":["'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers;\n\n\tChart.scaleService = {\n\t\t// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n\t\t// use the new chart options to grab the correct scale\n\t\tconstructors: {},\n\t\t// Use a registration function so that we can move to an ES6 map when we no longer need to support\n\t\t// old browsers\n\n\t\t// Scale config defaults\n\t\tdefaults: {},\n\t\tregisterScaleType: function(type, scaleConstructor, defaults) {\n\t\t\tthis.constructors[type] = scaleConstructor;\n\t\t\tthis.defaults[type] = helpers.clone(defaults);\n\t\t},\n\t\tgetScaleConstructor: function(type) {\n\t\t\treturn this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n\t\t},\n\t\tgetScaleDefaults: function(type) {\n\t\t\t// Return the scale defaults merged with the global settings so that we always use the latest ones\n\t\t\treturn this.defaults.hasOwnProperty(type) ? helpers.scaleMerge(Chart.defaults.scale, this.defaults[type]) : {};\n\t\t},\n\t\tupdateScaleDefaults: function(type, additions) {\n\t\t\tvar defaults = this.defaults;\n\t\t\tif (defaults.hasOwnProperty(type)) {\n\t\t\t\tdefaults[type] = helpers.extend(defaults[type], additions);\n\t\t\t}\n\t\t},\n\t\taddScalesToLayout: function(chartInstance) {\n\t\t\t// Adds each scale to the chart.boxes array to be sized accordingly\n\t\t\thelpers.each(chartInstance.scales, function(scale) {\n\t\t\t\tChart.layoutService.addBox(chartInstance, scale);\n\t\t\t});\n\t\t}\n\t};\n};\n"]},"metadata":{},"sourceType":"script"}