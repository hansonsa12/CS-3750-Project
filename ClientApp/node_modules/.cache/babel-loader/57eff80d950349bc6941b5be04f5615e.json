{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kronos\\\\Documents\\\\Programming\\\\Web\\\\React\\\\CS-3750-Project\\\\ClientApp\\\\src\\\\components\\\\Assignments\\\\AssignmentForm.js\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, IconButton, MenuItem } from \"@material-ui/core\";\nimport { Add } from \"@material-ui/icons\";\nimport axios from \"axios\";\nimport { makeValidate } from \"mui-rff\";\nimport React, { useContext } from \"react\";\nimport { Form as FForm } from \"react-final-form\";\nimport * as Yup from \"yup\";\nimport { AuthContext } from \"../../context/AuthProvider\";\nimport { AssignmentType, ASSIGNMENT_TYPES } from \"../../helpers/constants\";\nimport { DateTimeEntryItem, SectionHeaderItem, TextEntryItem } from \"../FormComponents\";\nexport default function AssignmentForm({\n  courseId\n}) {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const onSubmit = values => {\n    axios.request({\n      url: `api/courses/${courseId}/assignments`,\n      method: 'POST',\n      ...authHeader,\n      data: values\n    }).then(res => {\n      alert(\"Assignment Updated Successfully!\");\n      window.location.reload();\n    }).catch((err, res) => {\n      alert(`${err.message}:\\n${err.response.data.error}`);\n    });\n  };\n\n  const {\n    authHeader\n  } = useContext(AuthContext);\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required(\"Title is required\"),\n    dueDate: Yup.string().required(\"Due Date is required\"),\n    maxPoints: Yup.number().required(\"Max points is required\")\n  });\n  const validate = makeValidate(validationSchema);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    size: \"small\",\n    onClick: handleClickOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Add, {\n    fontSize: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(FForm, {\n    onSubmit: onSubmit,\n    initialValues: {\n      assignmentType: AssignmentType.FILE_UPLOAD,\n      maxPoints: 0,\n      courseId\n    },\n    validate: validate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, ({\n    handleSubmit\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 29\n    }\n  }, \"Assignment Form\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(SectionHeaderItem, {\n    top: true,\n    title: \"Assignment Information\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(TextEntryItem, {\n    name: \"title\",\n    required: true,\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(TextEntryItem, {\n    name: \"assignmentType\",\n    sm: 4,\n    required: true,\n    select: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 37\n    }\n  }, ASSIGNMENT_TYPES.map((option, index) => /*#__PURE__*/React.createElement(MenuItem, {\n    key: `assignmentTypeOption-${index}`,\n    value: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 49\n    }\n  }, option))), /*#__PURE__*/React.createElement(TextEntryItem, {\n    name: \"description\",\n    rows: 6,\n    multiline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(TextEntryItem, {\n    name: \"maxPoints\",\n    sm: 6,\n    required: true,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(DateTimeEntryItem, {\n    name: \"dueDate\",\n    sm: 6,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 33\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleSubmit,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 33\n    }\n  }, \"Submit\"))))));\n}","map":{"version":3,"sources":["C:/Users/Kronos/Documents/Programming/Web/React/CS-3750-Project/ClientApp/src/components/Assignments/AssignmentForm.js"],"names":["Button","Dialog","DialogActions","DialogContent","DialogTitle","Grid","IconButton","MenuItem","Add","axios","makeValidate","React","useContext","Form","FForm","Yup","AuthContext","AssignmentType","ASSIGNMENT_TYPES","DateTimeEntryItem","SectionHeaderItem","TextEntryItem","AssignmentForm","courseId","open","setOpen","useState","handleClickOpen","handleClose","onSubmit","values","request","url","method","authHeader","data","then","res","alert","window","location","reload","catch","err","message","response","error","validationSchema","object","shape","title","string","required","dueDate","maxPoints","number","validate","assignmentType","FILE_UPLOAD","handleSubmit","map","option","index"],"mappings":"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","sourcesContent":["import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Grid,\r\n    IconButton,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { Add } from \"@material-ui/icons\";\r\nimport axios from \"axios\";\r\nimport { makeValidate } from \"mui-rff\";\r\nimport React, { useContext } from \"react\";\r\nimport { Form as FForm } from \"react-final-form\";\r\nimport * as Yup from \"yup\";\r\nimport { AuthContext } from \"../../context/AuthProvider\";\r\nimport { AssignmentType, ASSIGNMENT_TYPES } from \"../../helpers/constants\";\r\nimport {\r\n    DateTimeEntryItem,\r\n    SectionHeaderItem,\r\n    TextEntryItem,\r\n} from \"../FormComponents\";\r\n\r\nexport default function AssignmentForm({ courseId }) {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const onSubmit = values => {\r\n        axios.request({\r\n            url: `api/courses/${courseId}/assignments`,\r\n            method: 'POST',\r\n            ...authHeader,\r\n            data: values\r\n        }).then(res => {\r\n            alert(\"Assignment Updated Successfully!\");\r\n            window.location.reload();\r\n          \r\n        }).catch((err, res) => {\r\n            alert(`${err.message}:\\n${err.response.data.error}`);\r\n        });\r\n    };\r\n\r\n    const { authHeader } = useContext(AuthContext);\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        title: Yup.string().required(\"Title is required\"),\r\n        dueDate: Yup.string().required(\"Due Date is required\"),\r\n        maxPoints: Yup.number().required(\"Max points is required\"),\r\n    });\r\n\r\n    const validate = makeValidate(validationSchema);\r\n\r\n    return (\r\n        <div>\r\n            <IconButton size=\"small\" onClick={handleClickOpen}>\r\n                <Add fontSize=\"small\" />\r\n            </IconButton>\r\n            <FForm\r\n                onSubmit={onSubmit}\r\n                initialValues={{\r\n                    assignmentType: AssignmentType.FILE_UPLOAD,\r\n                    maxPoints: 0,\r\n                    courseId,\r\n                }}\r\n                validate={validate}\r\n            >\r\n                {({ handleSubmit }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Dialog\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            aria-labelledby=\"form-dialog-title\"\r\n                        >\r\n                            <DialogTitle id=\"form-dialog-title\">\r\n                                Assignment Form\r\n                            </DialogTitle>\r\n                            <DialogContent>\r\n                                <Grid\r\n                                    container\r\n                                    spacing={2}\r\n                                    justify=\"space-between\"\r\n                                >\r\n                                    <SectionHeaderItem\r\n                                        top\r\n                                        title=\"Assignment Information\"\r\n                                    />\r\n                                    <TextEntryItem\r\n                                        name=\"title\"\r\n                                        required={true}\r\n                                        sm={8}\r\n                                    />\r\n                                    <TextEntryItem\r\n                                        name=\"assignmentType\"\r\n                                        sm={4}\r\n                                        required={true}\r\n                                        select\r\n                                    >\r\n                                        {ASSIGNMENT_TYPES.map(\r\n                                            (option, index) => (\r\n                                                <MenuItem\r\n                                                    key={`assignmentTypeOption-${index}`}\r\n                                                    value={option}\r\n                                                >\r\n                                                    {option}\r\n                                                </MenuItem>\r\n                                            )\r\n                                        )}\r\n                                    </TextEntryItem>\r\n                                    <TextEntryItem\r\n                                        name=\"description\"\r\n                                        rows={6}\r\n                                        multiline\r\n                                    />\r\n                                    <TextEntryItem\r\n                                        name=\"maxPoints\"\r\n                                        sm={6}\r\n                                        required={true}\r\n                                        type=\"number\"\r\n                                    />\r\n                                    <DateTimeEntryItem\r\n                                        name=\"dueDate\"\r\n                                        sm={6}\r\n                                        required={true}\r\n                                    />\r\n                                </Grid>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={handleClose} color=\"primary\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button onClick={handleSubmit} color=\"primary\">\r\n                                    Submit\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                    </form>\r\n                )}\r\n            </FForm>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}