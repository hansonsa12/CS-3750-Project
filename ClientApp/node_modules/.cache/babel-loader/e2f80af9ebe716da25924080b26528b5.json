{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kronos\\\\Documents\\\\Programming\\\\Web\\\\React\\\\CS-3750-Project\\\\ClientApp\\\\src\\\\components\\\\Assignments\\\\AssignmentGradingForm.js\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, IconButton, MenuItem, Tooltip } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { makeValidate } from \"mui-rff\";\nimport React, { useContext } from \"react\";\nimport { Form as FForm } from \"react-final-form\";\nimport * as Yup from \"yup\";\nimport { AuthContext } from \"../../context/AuthProvider\";\nimport { AssignmentType, ASSIGNMENT_TYPES } from \"../../helpers/helpers\";\nimport { SectionHeaderItem, TextEntryItem } from \"../FormComponents\";\nexport default function AssignmentGradingForm({\n  courseId,\n  assignment,\n  children\n}) {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const {\n    authHeader,\n    isInstructor\n  } = useContext(AuthContext);\n\n  const onSubmit = values => {\n    axios.request({\n      url: `api/courses/${courseId}/assignments`,\n      method: \"POST\",\n      ...authHeader,\n      data: values\n    }).then(res => {\n      alert(\"Assignment Graded Successfully!\");\n      window.location.reload();\n    }).catch((err, res) => {\n      alert(`${err.message}:\\n${err.response.data.error}`);\n    });\n  };\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required(\"Score is required\")\n  });\n  const validate = makeValidate(validationSchema);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    key: \"course-form-open-button\",\n    onClick: handleClickOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, children), /*#__PURE__*/React.createElement(FForm, {\n    onSubmit: onSubmit,\n    initialValues: assignment || {\n      assignmentType: AssignmentType.FILE_UPLOAD,\n      courseId\n    },\n    validate: validate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, ({\n    handleSubmit\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 29\n    }\n  }, \"Score Assignment\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(SectionHeaderItem, {\n    top: true,\n    title: \"Score Assignment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(TextEntryItem, {\n    name: \"Score\",\n    required: true,\n    sm: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(TextEntryItem, {\n    name: \"Comments\",\n    rows: 6,\n    multiline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 33\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleSubmit,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 33\n    }\n  }, \"Save\"))))));\n}","map":{"version":3,"sources":["C:/Users/Kronos/Documents/Programming/Web/React/CS-3750-Project/ClientApp/src/components/Assignments/AssignmentGradingForm.js"],"names":["Button","Dialog","DialogActions","DialogContent","DialogTitle","Grid","IconButton","MenuItem","Tooltip","axios","makeValidate","React","useContext","Form","FForm","Yup","AuthContext","AssignmentType","ASSIGNMENT_TYPES","SectionHeaderItem","TextEntryItem","AssignmentGradingForm","courseId","assignment","children","open","setOpen","useState","handleClickOpen","handleClose","authHeader","isInstructor","onSubmit","values","request","url","method","data","then","res","alert","window","location","reload","catch","err","message","response","error","validationSchema","object","shape","title","string","required","validate","assignmentType","FILE_UPLOAD","handleSubmit"],"mappings":"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","sourcesContent":["import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Grid,\r\n    IconButton,\r\n    MenuItem,\r\n    Tooltip\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { makeValidate } from \"mui-rff\";\r\nimport React, { useContext } from \"react\";\r\nimport { Form as FForm } from \"react-final-form\";\r\nimport * as Yup from \"yup\";\r\nimport { AuthContext } from \"../../context/AuthProvider\";\r\nimport { AssignmentType, ASSIGNMENT_TYPES } from \"../../helpers/helpers\";\r\nimport {\r\n    SectionHeaderItem,\r\n    TextEntryItem\r\n} from \"../FormComponents\";\r\n\r\nexport default function AssignmentGradingForm({\r\n    courseId,\r\n    assignment,\r\n    children\r\n}) {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const { authHeader, isInstructor } = useContext(AuthContext);\r\n\r\n    const onSubmit = values => {\r\n        axios\r\n            .request({\r\n                url: `api/courses/${courseId}/assignments`,\r\n                method: \"POST\",\r\n                ...authHeader,\r\n                data: values\r\n            })\r\n            .then(res => {\r\n                alert(\"Assignment Graded Successfully!\");\r\n                window.location.reload();\r\n            })\r\n            .catch((err, res) => {\r\n                alert(`${err.message}:\\n${err.response.data.error}`);\r\n            });\r\n    };\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        title: Yup.string().required(\"Score is required\")\r\n    });\r\n\r\n    const validate = makeValidate(validationSchema);\r\n\r\n    return (\r\n        <div>\r\n            <div key=\"course-form-open-button\" onClick={handleClickOpen}>\r\n                {children}\r\n            </div>\r\n            <FForm\r\n                onSubmit={onSubmit}\r\n                initialValues={\r\n                    assignment || {\r\n                        assignmentType: AssignmentType.FILE_UPLOAD,\r\n                        courseId\r\n                    }\r\n                }\r\n                validate={validate}\r\n            >\r\n                {({ handleSubmit }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Dialog\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            aria-labelledby=\"form-dialog-title\"\r\n                        >\r\n                            <DialogTitle id=\"form-dialog-title\">\r\n                                Score Assignment\r\n                            </DialogTitle>\r\n                            <DialogContent>\r\n                                <Grid\r\n                                    container\r\n                                    spacing={2}\r\n                                    justify=\"space-between\"\r\n                                >\r\n                                    <SectionHeaderItem\r\n                                        top\r\n                                        title=\"Score Assignment\"\r\n                                    />\r\n                                    <TextEntryItem\r\n                                        name=\"Score\"\r\n                                        required={true}\r\n                                        sm={3}\r\n                                    />\r\n                                    <TextEntryItem\r\n                                        name=\"Comments\"\r\n                                        rows={6}\r\n                                        multiline\r\n                                    />\r\n                                </Grid>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={handleClose} color=\"primary\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button onClick={handleSubmit} color=\"primary\">\r\n                                    Save\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                    </form>\r\n                )}\r\n            </FForm>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}