{"ast":null,"code":"'use strict';\n\nmodule.exports = function (Chart) {\n  var helpers = Chart.helpers,\n      globalOpts = Chart.defaults.global;\n  globalOpts.elements.arc = {\n    backgroundColor: globalOpts.defaultColor,\n    borderColor: '#fff',\n    borderWidth: 2\n  };\n  Chart.elements.Arc = Chart.Element.extend({\n    inLabelRange: function (mouseX) {\n      var vm = this._view;\n\n      if (vm) {\n        return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);\n      }\n\n      return false;\n    },\n    inRange: function (chartX, chartY) {\n      var vm = this._view;\n\n      if (vm) {\n        var pointRelativePosition = helpers.getAngleFromPoint(vm, {\n          x: chartX,\n          y: chartY\n        }),\n            angle = pointRelativePosition.angle,\n            distance = pointRelativePosition.distance; // Sanitise angle range\n\n        var startAngle = vm.startAngle;\n        var endAngle = vm.endAngle;\n\n        while (endAngle < startAngle) {\n          endAngle += 2.0 * Math.PI;\n        }\n\n        while (angle > endAngle) {\n          angle -= 2.0 * Math.PI;\n        }\n\n        while (angle < startAngle) {\n          angle += 2.0 * Math.PI;\n        } // Check if within the range of the open/close angle\n\n\n        var betweenAngles = angle >= startAngle && angle <= endAngle,\n            withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;\n        return betweenAngles && withinRadius;\n      }\n\n      return false;\n    },\n    getCenterPoint: function () {\n      var vm = this._view;\n      var halfAngle = (vm.startAngle + vm.endAngle) / 2;\n      var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;\n      return {\n        x: vm.x + Math.cos(halfAngle) * halfRadius,\n        y: vm.y + Math.sin(halfAngle) * halfRadius\n      };\n    },\n    getArea: function () {\n      var vm = this._view;\n      return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));\n    },\n    tooltipPosition: function () {\n      var vm = this._view;\n      var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2,\n          rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;\n      return {\n        x: vm.x + Math.cos(centreAngle) * rangeFromCentre,\n        y: vm.y + Math.sin(centreAngle) * rangeFromCentre\n      };\n    },\n    draw: function () {\n      var ctx = this._chart.ctx,\n          vm = this._view,\n          sA = vm.startAngle,\n          eA = vm.endAngle;\n      ctx.beginPath();\n      ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);\n      ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n      ctx.closePath();\n      ctx.strokeStyle = vm.borderColor;\n      ctx.lineWidth = vm.borderWidth;\n      ctx.fillStyle = vm.backgroundColor;\n      ctx.fill();\n      ctx.lineJoin = 'bevel';\n\n      if (vm.borderWidth) {\n        ctx.stroke();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/Kronos/Documents/Programming/Web/React/CS-3750-Project/ClientApp/node_modules/chart.js/src/elements/element.arc.js"],"names":["module","exports","Chart","helpers","globalOpts","defaults","global","elements","arc","backgroundColor","defaultColor","borderColor","borderWidth","Arc","Element","extend","inLabelRange","mouseX","vm","_view","Math","pow","x","radius","hoverRadius","inRange","chartX","chartY","pointRelativePosition","getAngleFromPoint","y","angle","distance","startAngle","endAngle","PI","betweenAngles","withinRadius","innerRadius","outerRadius","getCenterPoint","halfAngle","halfRadius","cos","sin","getArea","tooltipPosition","centreAngle","rangeFromCentre","draw","ctx","_chart","sA","eA","beginPath","closePath","strokeStyle","lineWidth","fillStyle","fill","lineJoin","stroke"],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers,\n\t\tglobalOpts = Chart.defaults.global;\n\n\tglobalOpts.elements.arc = {\n\t\tbackgroundColor: globalOpts.defaultColor,\n\t\tborderColor: '#fff',\n\t\tborderWidth: 2\n\t};\n\n\tChart.elements.Arc = Chart.Element.extend({\n\t\tinLabelRange: function(mouseX) {\n\t\t\tvar vm = this._view;\n\n\t\t\tif (vm) {\n\t\t\t\treturn (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tinRange: function(chartX, chartY) {\n\t\t\tvar vm = this._view;\n\n\t\t\tif (vm) {\n\t\t\t\tvar pointRelativePosition = helpers.getAngleFromPoint(vm, {\n\t\t\t\t\t\tx: chartX,\n\t\t\t\t\t\ty: chartY\n\t\t\t\t\t}),\n\t\t\t\t\tangle = pointRelativePosition.angle,\n\t\t\t\t\tdistance = pointRelativePosition.distance;\n\n\t\t\t\t// Sanitise angle range\n\t\t\t\tvar startAngle = vm.startAngle;\n\t\t\t\tvar endAngle = vm.endAngle;\n\t\t\t\twhile (endAngle < startAngle) {\n\t\t\t\t\tendAngle += 2.0 * Math.PI;\n\t\t\t\t}\n\t\t\t\twhile (angle > endAngle) {\n\t\t\t\t\tangle -= 2.0 * Math.PI;\n\t\t\t\t}\n\t\t\t\twhile (angle < startAngle) {\n\t\t\t\t\tangle += 2.0 * Math.PI;\n\t\t\t\t}\n\n\t\t\t\t// Check if within the range of the open/close angle\n\t\t\t\tvar betweenAngles = (angle >= startAngle && angle <= endAngle),\n\t\t\t\t\twithinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);\n\n\t\t\t\treturn (betweenAngles && withinRadius);\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tgetCenterPoint: function() {\n\t\t\tvar vm = this._view;\n\t\t\tvar halfAngle = (vm.startAngle + vm.endAngle) / 2;\n\t\t\tvar halfRadius = (vm.innerRadius + vm.outerRadius) / 2;\n\t\t\treturn {\n\t\t\t\tx: vm.x + Math.cos(halfAngle) * halfRadius,\n\t\t\t\ty: vm.y + Math.sin(halfAngle) * halfRadius\n\t\t\t};\n\t\t},\n\t\tgetArea: function() {\n\t\t\tvar vm = this._view;\n\t\t\treturn Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));\n\t\t},\n\t\ttooltipPosition: function() {\n\t\t\tvar vm = this._view;\n\n\t\t\tvar centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2),\n\t\t\t\trangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;\n\t\t\treturn {\n\t\t\t\tx: vm.x + (Math.cos(centreAngle) * rangeFromCentre),\n\t\t\t\ty: vm.y + (Math.sin(centreAngle) * rangeFromCentre)\n\t\t\t};\n\t\t},\n\t\tdraw: function() {\n\n\t\t\tvar ctx = this._chart.ctx,\n\t\t\t\tvm = this._view,\n\t\t\t\tsA = vm.startAngle,\n\t\t\t\teA = vm.endAngle;\n\n\t\t\tctx.beginPath();\n\n\t\t\tctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);\n\t\t\tctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);\n\n\t\t\tctx.closePath();\n\t\t\tctx.strokeStyle = vm.borderColor;\n\t\t\tctx.lineWidth = vm.borderWidth;\n\n\t\t\tctx.fillStyle = vm.backgroundColor;\n\n\t\t\tctx.fill();\n\t\t\tctx.lineJoin = 'bevel';\n\n\t\t\tif (vm.borderWidth) {\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t}\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}