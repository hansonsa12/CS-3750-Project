{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kronos\\\\Documents\\\\Programming\\\\Web\\\\React\\\\CS-3750-Project\\\\ClientApp\\\\src\\\\context\\\\DataProvider.js\";\n// reference: https://www.youtube.com/watch?v=XuFDcZABiDQ\nimport axios from \"axios\";\nimport _ from \"lodash\";\nimport React, { createContext, useContext, useEffect, useMemo, useState } from \"react\";\nimport { AuthContext } from \"./AuthProvider\";\nconst initialState = {\n  courses: [{\n    courseId: undefined,\n    courseName: undefined,\n    courseNumber: undefined,\n    instructorId: undefined,\n    instructor: {\n      firstName: undefined,\n      lastName: undefined\n    },\n    department: undefined,\n    creditHours: undefined,\n    description: undefined,\n    buildingName: undefined,\n    roomNumber: undefined,\n    meetingDays: undefined,\n    startTime: undefined,\n    endTime: undefined,\n    maxCapacity: undefined\n  }]\n}; // Create context\n\nexport const DataContext = createContext(initialState); // Provider component\n\nexport default function DataProvider({\n  children\n}) {\n  const {\n    isInstructor,\n    isStudent,\n    authHeader,\n    user\n  } = useContext(AuthContext);\n  const [loading, setLoading] = useState(true);\n  const [courses, setCourses] = useState();\n  const [registrations, setRegistrations] = useState([]);\n  const [allCourses, setAllCourses] = useState([]);\n  const [submissions, setSubmissions] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      setCourses(await getCourses());\n      setRegistrations(await getRegistrations());\n      setAllCourses(await getAllCourses());\n      setLoading(false);\n    }\n\n    fetchData();\n  }, []);\n  useEffect(() => {\n    async function fetchData() {\n      setSubmissions(await getSubmissions());\n    }\n\n    fetchData();\n  }, [user]);\n\n  const getCourses = async () => {\n    if (isInstructor) {\n      const res = await axios.get(\"api/courses\", authHeader);\n      return res.data;\n    }\n  };\n\n  const getRegistrations = async () => {\n    if (isStudent) {\n      const res = await axios.get(\"api/registrations\", authHeader);\n      return res.data;\n    }\n  };\n\n  const getAllCourses = async () => {\n    if (isStudent) {\n      const res = await axios.get(\"api/courses/all\", authHeader);\n      return res.data;\n    }\n  };\n\n  const getSubmissions = async () => {\n    if (user && isStudent) {\n      const res = await axios.get(`api/users/${user.userId}/submissions`, authHeader);\n      return res.data;\n    }\n  };\n\n  const userCourses = isInstructor ? courses : registrations;\n  const registeredCourseIds = useMemo(() => {\n    // get array of registered course ids on initial component\n    // load and if registrations array changes\n    // https://reactjs.org/docs/hooks-reference.html#usecallback\n    return _.map(userCourses, \"courseId\");\n  }, [userCourses]);\n  const assignments = useMemo(() => {\n    if ((registeredCourseIds === null || registeredCourseIds === void 0 ? void 0 : registeredCourseIds.length) && (allCourses === null || allCourses === void 0 ? void 0 : allCourses.length)) {\n      return _.chain(registeredCourseIds).map(id => allCourses.find(c => c.courseId === id)).flatMap(c => c.assignment.map(a => ({ ...a,\n        courseNumber: c.courseNumber\n      }))).value();\n    }\n  }, [registeredCourseIds, allCourses]);\n  return !loading && /*#__PURE__*/React.createElement(DataContext.Provider, {\n    value: {\n      userCourses,\n      setUserCourses: isInstructor ? setCourses : setRegistrations,\n      allCourses,\n      submissions,\n      registeredCourseIds,\n      assignments,\n      setSubmissions\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, children);\n}","map":{"version":3,"sources":["C:/Users/Kronos/Documents/Programming/Web/React/CS-3750-Project/ClientApp/src/context/DataProvider.js"],"names":["axios","_","React","createContext","useContext","useEffect","useMemo","useState","AuthContext","initialState","courses","courseId","undefined","courseName","courseNumber","instructorId","instructor","firstName","lastName","department","creditHours","description","buildingName","roomNumber","meetingDays","startTime","endTime","maxCapacity","DataContext","DataProvider","children","isInstructor","isStudent","authHeader","user","loading","setLoading","setCourses","registrations","setRegistrations","allCourses","setAllCourses","submissions","setSubmissions","fetchData","getCourses","getRegistrations","getAllCourses","getSubmissions","res","get","data","userId","userCourses","registeredCourseIds","map","assignments","length","chain","id","find","c","flatMap","assignment","a","value","setUserCourses"],"mappings":"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","sourcesContent":["// reference: https://www.youtube.com/watch?v=XuFDcZABiDQ\r\nimport axios from \"axios\";\r\nimport _ from \"lodash\";\r\nimport React, {\r\n    createContext,\r\n    useContext,\r\n    useEffect,\r\n    useMemo,\r\n    useState\r\n} from \"react\";\r\nimport { AuthContext } from \"./AuthProvider\";\r\n\r\nconst initialState = {\r\n    courses: [\r\n        {\r\n            courseId: undefined,\r\n            courseName: undefined,\r\n            courseNumber: undefined,\r\n            instructorId: undefined,\r\n            instructor: {\r\n                firstName: undefined,\r\n                lastName: undefined\r\n            },\r\n            department: undefined,\r\n            creditHours: undefined,\r\n            description: undefined,\r\n            buildingName: undefined,\r\n            roomNumber: undefined,\r\n            meetingDays: undefined,\r\n            startTime: undefined,\r\n            endTime: undefined,\r\n            maxCapacity: undefined\r\n        }\r\n    ]\r\n};\r\n\r\n// Create context\r\nexport const DataContext = createContext(initialState);\r\n\r\n// Provider component\r\nexport default function DataProvider({ children }) {\r\n    const { isInstructor, isStudent, authHeader, user } = useContext(\r\n        AuthContext\r\n    );\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const [courses, setCourses] = useState();\r\n    const [registrations, setRegistrations] = useState([]);\r\n    const [allCourses, setAllCourses] = useState([]);\r\n    const [submissions, setSubmissions] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            setCourses(await getCourses());\r\n            setRegistrations(await getRegistrations());\r\n            setAllCourses(await getAllCourses());\r\n            setLoading(false);\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            setSubmissions(await getSubmissions());\r\n        }\r\n        fetchData();\r\n    }, [user]);\r\n\r\n    const getCourses = async () => {\r\n        if (isInstructor) {\r\n            const res = await axios.get(\"api/courses\", authHeader);\r\n            return res.data;\r\n        }\r\n    };\r\n\r\n    const getRegistrations = async () => {\r\n        if (isStudent) {\r\n            const res = await axios.get(\"api/registrations\", authHeader);\r\n            return res.data;\r\n        }\r\n    };\r\n\r\n    const getAllCourses = async () => {\r\n        if (isStudent) {\r\n            const res = await axios.get(\"api/courses/all\", authHeader);\r\n            return res.data;\r\n        }\r\n    };\r\n\r\n    const getSubmissions = async () => {\r\n        if (user && isStudent) {\r\n            const res = await axios.get(\r\n                `api/users/${user.userId}/submissions`,\r\n                authHeader\r\n            );\r\n            return res.data;\r\n        }\r\n    };\r\n\r\n    const userCourses = isInstructor ? courses : registrations;\r\n\r\n    const registeredCourseIds = useMemo(() => {\r\n        // get array of registered course ids on initial component\r\n        // load and if registrations array changes\r\n        // https://reactjs.org/docs/hooks-reference.html#usecallback\r\n        return _.map(userCourses, \"courseId\");\r\n    }, [userCourses]);\r\n\r\n    const assignments = useMemo(() => {\r\n        if (registeredCourseIds?.length && allCourses?.length) {\r\n            return _.chain(registeredCourseIds)\r\n                .map(id => allCourses.find(c => c.courseId === id))\r\n                .flatMap(c =>\r\n                    c.assignment.map(a => ({\r\n                        ...a,\r\n                        courseNumber: c.courseNumber\r\n                    }))\r\n                )\r\n                .value();\r\n        }\r\n    }, [registeredCourseIds, allCourses]);\r\n\r\n    return (\r\n        !loading && (\r\n            <DataContext.Provider\r\n                value={{\r\n                    userCourses,\r\n                    setUserCourses: isInstructor\r\n                        ? setCourses\r\n                        : setRegistrations,\r\n                    allCourses,\r\n                    submissions,\r\n                    registeredCourseIds,\r\n                    assignments,\r\n                    setSubmissions\r\n                }}\r\n            >\r\n                {children}\r\n            </DataContext.Provider>\r\n        )\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}