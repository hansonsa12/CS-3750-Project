{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kronos\\\\Documents\\\\Programming\\\\Web\\\\React\\\\CS-3750-Project\\\\ClientApp\\\\src\\\\components\\\\Assignments\\\\AssignmentDetails.js\";\nimport { Grid } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport _ from \"lodash\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { AuthContext } from \"../../context/AuthProvider\";\nimport { getFormattedDateTime } from \"../../helpers/helpers\";\nimport DetailsContainer from \"../DetailsContainer\";\nimport { SectionHeaderItem } from \"../FormComponents\";\nimport MainView from \"../MainView\";\nimport AssignmentBarChart from \"./AssignmentBarChart\";\nimport AssignmentSubmissionsTable from \"./AssignmentSubmissionsTable\";\nimport InstructorAssignmentBarChart from \"./InstructorAssignmentBarChart\";\nimport SubmissionDetails from \"./SubmissionDetails\";\nexport default function AssignmentDetails() {\n  const {\n    assignmentId\n  } = useParams(); // get params from route url\n\n  const {\n    authHeader,\n    isInstructor,\n    isStudent\n  } = useContext(AuthContext);\n  const [assignment, setAssigment] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await axios.get(`api/assignments/${assignmentId}`, authHeader);\n      setAssigment(res.data);\n    };\n\n    fetchData();\n  }, [assignmentId]);\n\n  const submission = isStudent && _.get(assignment, \"assignmentSubmissions[0]\");\n\n  return /*#__PURE__*/React.createElement(MainView, {\n    title: assignment === null || assignment === void 0 ? void 0 : assignment.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DetailsContainer, {\n    object: assignment,\n    omitProperties: [\"assignmentSubmissions\", \"assignmentId\", \"courseId\", \"title\"],\n    specialFormatters: {\n      dueDate: a => getFormattedDateTime(a.dueDate)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }, (submission === null || submission === void 0 ? void 0 : submission.receivedScore) && /*#__PURE__*/React.createElement(AssignmentBarChart, {\n    assignment: assignment,\n    receivedScore: submission === null || submission === void 0 ? void 0 : submission.receivedScore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 29\n    }\n  }))), isStudent && submission && /*#__PURE__*/React.createElement(SubmissionDetails, {\n    submission: submission,\n    assignment: assignment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }), isInstructor && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SectionHeaderItem, {\n    title: \"Submissions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(AssignmentSubmissionsTable, {\n    rows: assignment.assignmentSubmissions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(InstructorAssignmentBarChart, {\n    assignment: assignment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 29\n    }\n  })))));\n}","map":{"version":3,"sources":["C:/Users/Kronos/Documents/Programming/Web/React/CS-3750-Project/ClientApp/src/components/Assignments/AssignmentDetails.js"],"names":["Grid","axios","_","React","useContext","useEffect","useState","useParams","AuthContext","getFormattedDateTime","DetailsContainer","SectionHeaderItem","MainView","AssignmentBarChart","AssignmentSubmissionsTable","InstructorAssignmentBarChart","SubmissionDetails","AssignmentDetails","assignmentId","authHeader","isInstructor","isStudent","assignment","setAssigment","fetchData","res","get","data","submission","title","dueDate","a","receivedScore","assignmentSubmissions"],"mappings":"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","sourcesContent":["import { Grid } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport _ from \"lodash\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { AuthContext } from \"../../context/AuthProvider\";\r\nimport { getFormattedDateTime } from \"../../helpers/helpers\";\r\nimport DetailsContainer from \"../DetailsContainer\";\r\nimport { SectionHeaderItem } from \"../FormComponents\";\r\nimport MainView from \"../MainView\";\r\nimport AssignmentBarChart from \"./AssignmentBarChart\";\r\nimport AssignmentSubmissionsTable from \"./AssignmentSubmissionsTable\";\r\nimport InstructorAssignmentBarChart from \"./InstructorAssignmentBarChart\";\r\nimport SubmissionDetails from \"./SubmissionDetails\";\r\n\r\nexport default function AssignmentDetails() {\r\n    const { assignmentId } = useParams(); // get params from route url\r\n\r\n    const { authHeader, isInstructor, isStudent } = useContext(AuthContext);\r\n\r\n    const [assignment, setAssigment] = useState([]);\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const res = await axios.get(\r\n                `api/assignments/${assignmentId}`,\r\n                authHeader\r\n            );\r\n            setAssigment(res.data);\r\n        };\r\n        fetchData();\r\n    }, [assignmentId]);\r\n\r\n    const submission =\r\n        isStudent && _.get(assignment, \"assignmentSubmissions[0]\");\r\n\r\n    return (\r\n        <MainView title={assignment?.title}>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                    <DetailsContainer\r\n                        object={assignment}\r\n                        omitProperties={[\r\n                            \"assignmentSubmissions\",\r\n                            \"assignmentId\",\r\n                            \"courseId\",\r\n                            \"title\"\r\n                        ]}\r\n                        specialFormatters={{\r\n                            dueDate: a => getFormattedDateTime(a.dueDate)\r\n                        }}\r\n                    >\r\n                        {submission?.receivedScore && (\r\n                            <AssignmentBarChart\r\n                                assignment={assignment}\r\n                                receivedScore={submission?.receivedScore}\r\n                            />\r\n                        )}\r\n                    </DetailsContainer>\r\n                </Grid>\r\n                {isStudent && submission && (\r\n                    <SubmissionDetails\r\n                        submission={submission}\r\n                        assignment={assignment}\r\n                    />\r\n                )}\r\n                {isInstructor && (\r\n                    <>\r\n                        <SectionHeaderItem title=\"Submissions\" />\r\n                        <Grid item xs={12}>\r\n                            <AssignmentSubmissionsTable\r\n                                rows={assignment.assignmentSubmissions}\r\n                            />\r\n                            <InstructorAssignmentBarChart \r\n                                assignment={assignment}\r\n                            />\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n            </Grid>\r\n        </MainView>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}