{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kronos\\\\Documents\\\\Programming\\\\Web\\\\React\\\\CS-3750-Project\\\\ClientApp\\\\src\\\\components\\\\Assignments\\\\AssignmentSubmissionForm.js\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { makeValidate } from \"mui-rff\";\nimport React, { useCallback, useContext, useState } from \"react\";\nimport { Form as FForm } from \"react-final-form\";\nimport * as Yup from \"yup\";\nimport { AuthContext } from \"../../context/AuthProvider\";\nimport { DataContext } from \"../../context/DataProvider\";\nimport { AssignmentType, getFormattedDateTime } from \"../../helpers/helpers\";\nimport DetailsContainer from \"../DetailsContainer\";\nimport FileUploader from \"../FileUploading/FileUploader\";\nimport { SectionHeaderItem, TextEntryItem } from \"../FormComponents\";\nexport default function AssignmentSubmissionForm({\n  assignment,\n  children\n}) {\n  const {\n    user,\n    authHeader\n  } = useContext(AuthContext);\n  const {\n    submissions,\n    setSubmissions\n  } = useContext(DataContext);\n  const [open, setOpen] = useState(false);\n  const [selectedFile, setSelectedFile] = useState();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const onDrop = useCallback(acceptedFiles => {\n    // Do something with the files\n    setSelectedFile(acceptedFiles[0]);\n  }, []);\n\n  const onSubmit = async values => {\n    try {\n      if (selectedFile) {\n        const formData = new FormData();\n        formData.append(\"file\", selectedFile, selectedFile.name);\n        const {\n          data: {\n            fileName\n          }\n        } = await axios.post(\"api/fileuploads/submission\", formData, authHeader);\n        values.submission = selectedFile.name;\n        values.fileName = fileName;\n      }\n\n      const res = await axios.post(`api/assignments/${values.assignmentId}/submissions`, values, authHeader);\n      alert(\"Assignment successfully submitted!\");\n      setSubmissions([...submissions, res.data]);\n      handleClose();\n    } catch (err) {\n      alert(`${err.message}:\\n${err.response.data.error}`);\n    }\n  };\n\n  const validationSchema = Yup.object().shape({\n    submission: Yup.string().required(\"Submission is required\")\n  });\n  const validate = makeValidate(validationSchema);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    key: \"course-form-open-button\",\n    onClick: handleClickOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, children), /*#__PURE__*/React.createElement(FForm, {\n    onSubmit: onSubmit,\n    initialValues: {\n      assignmentId: assignment.assignmentId,\n      studentId: user.userId,\n      submission: selectedFile\n    },\n    validate: validate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, ({\n    handleSubmit\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 29\n    }\n  }, \"Submit Assignment\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(SectionHeaderItem, {\n    top: true,\n    title: \"Assignment Information\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(DetailsContainer, {\n    object: assignment,\n    specialFormatters: {\n      dueDate: a => getFormattedDateTime(a.dueDate)\n    },\n    omitProperties: [\"assignmentId\", \"courseId\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(SectionHeaderItem, {\n    title: \"Submission\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 37\n    }\n  }), assignment.assignmentType === AssignmentType.TEXT_ENTRY ? /*#__PURE__*/React.createElement(TextEntryItem, {\n    name: \"submission\",\n    label: \"Submission Text\",\n    rows: 6,\n    multiline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 41\n    }\n  }) : /*#__PURE__*/React.createElement(FileUploader, {\n    onDrop: onDrop,\n    selectedFile: selectedFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 41\n    }\n  }))), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 33\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleSubmit,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 33\n    }\n  }, \"Submit\"))))));\n}","map":{"version":3,"sources":["C:/Users/Kronos/Documents/Programming/Web/React/CS-3750-Project/ClientApp/src/components/Assignments/AssignmentSubmissionForm.js"],"names":["Button","Dialog","DialogActions","DialogContent","DialogTitle","Grid","axios","makeValidate","React","useCallback","useContext","useState","Form","FForm","Yup","AuthContext","DataContext","AssignmentType","getFormattedDateTime","DetailsContainer","FileUploader","SectionHeaderItem","TextEntryItem","AssignmentSubmissionForm","assignment","children","user","authHeader","submissions","setSubmissions","open","setOpen","selectedFile","setSelectedFile","handleClickOpen","handleClose","onDrop","acceptedFiles","onSubmit","values","formData","FormData","append","name","data","fileName","post","submission","res","assignmentId","alert","err","message","response","error","validationSchema","object","shape","string","required","validate","studentId","userId","handleSubmit","dueDate","a","assignmentType","TEXT_ENTRY"],"mappings":"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","sourcesContent":["import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Grid\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { makeValidate } from \"mui-rff\";\r\nimport React, { useCallback, useContext, useState } from \"react\";\r\nimport { Form as FForm } from \"react-final-form\";\r\nimport * as Yup from \"yup\";\r\nimport { AuthContext } from \"../../context/AuthProvider\";\r\nimport { DataContext } from \"../../context/DataProvider\";\r\nimport { AssignmentType, getFormattedDateTime } from \"../../helpers/helpers\";\r\nimport DetailsContainer from \"../DetailsContainer\";\r\nimport FileUploader from \"../FileUploading/FileUploader\";\r\nimport { SectionHeaderItem, TextEntryItem } from \"../FormComponents\";\r\n\r\nexport default function AssignmentSubmissionForm({ assignment, children }) {\r\n    const { user, authHeader } = useContext(AuthContext);\r\n    const { submissions, setSubmissions } = useContext(DataContext);\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [selectedFile, setSelectedFile] = useState();\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        // Do something with the files\r\n        setSelectedFile(acceptedFiles[0]);\r\n    }, []);\r\n\r\n    const onSubmit = async values => {\r\n        try {\r\n            if (selectedFile) {\r\n                const formData = new FormData();\r\n                formData.append(\"file\", selectedFile, selectedFile.name);\r\n\r\n                const {\r\n                    data: { fileName }\r\n                } = await axios.post(\r\n                    \"api/fileuploads/submission\",\r\n                    formData,\r\n                    authHeader\r\n                );\r\n\r\n                values.submission = selectedFile.name;\r\n                values.fileName = fileName;\r\n            }\r\n\r\n            const res = await axios.post(\r\n                `api/assignments/${values.assignmentId}/submissions`,\r\n                values,\r\n                authHeader\r\n            );\r\n\r\n            alert(\"Assignment successfully submitted!\");\r\n            setSubmissions([...submissions, res.data]);\r\n            handleClose();\r\n        } catch (err) {\r\n            alert(`${err.message}:\\n${err.response.data.error}`);\r\n        }\r\n    };\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        submission: Yup.string().required(\"Submission is required\")\r\n    });\r\n\r\n    const validate = makeValidate(validationSchema);\r\n    return (\r\n        <div>\r\n            <div key=\"course-form-open-button\" onClick={handleClickOpen}>\r\n                {children}\r\n            </div>\r\n            <FForm\r\n                onSubmit={onSubmit}\r\n                initialValues={{\r\n                    assignmentId: assignment.assignmentId,\r\n                    studentId: user.userId,\r\n                    submission: selectedFile\r\n                }}\r\n                validate={validate}\r\n            >\r\n                {({ handleSubmit }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Dialog\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            aria-labelledby=\"form-dialog-title\"\r\n                        >\r\n                            <DialogTitle id=\"form-dialog-title\">\r\n                                Submit Assignment\r\n                            </DialogTitle>\r\n                            <DialogContent>\r\n                                <Grid\r\n                                    container\r\n                                    spacing={2}\r\n                                    justify=\"space-between\"\r\n                                >\r\n                                    <SectionHeaderItem\r\n                                        top\r\n                                        title=\"Assignment Information\"\r\n                                    />\r\n                                    <Grid item xs={12}>\r\n                                        <DetailsContainer\r\n                                            object={assignment}\r\n                                            specialFormatters={{\r\n                                                dueDate: a =>\r\n                                                    getFormattedDateTime(\r\n                                                        a.dueDate\r\n                                                    )\r\n                                            }}\r\n                                            omitProperties={[\r\n                                                \"assignmentId\",\r\n                                                \"courseId\"\r\n                                            ]}\r\n                                        />\r\n                                    </Grid>\r\n                                    <SectionHeaderItem title=\"Submission\" />\r\n                                    {assignment.assignmentType ===\r\n                                    AssignmentType.TEXT_ENTRY ? (\r\n                                        <TextEntryItem\r\n                                            name=\"submission\"\r\n                                            label=\"Submission Text\"\r\n                                            rows={6}\r\n                                            multiline\r\n                                        />\r\n                                    ) : (\r\n                                        <FileUploader\r\n                                            onDrop={onDrop}\r\n                                            selectedFile={selectedFile}\r\n                                        />\r\n                                    )}\r\n                                </Grid>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={handleClose} color=\"primary\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button onClick={handleSubmit} color=\"primary\">\r\n                                    Submit\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                    </form>\r\n                )}\r\n            </FForm>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}