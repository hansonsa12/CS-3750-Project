{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kronos\\\\Documents\\\\Programming\\\\Web\\\\React\\\\CS-3750-Project\\\\ClientApp\\\\src\\\\components\\\\Tuition\\\\CreditCardForm.js\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, InputAdornment, Typography } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport dayjs from \"dayjs\";\nimport _ from \"lodash\";\nimport { makeValidate } from \"mui-rff\";\nimport React, { useState } from \"react\";\nimport { Form as FForm } from \"react-final-form\";\nimport * as Yup from \"yup\";\nimport { testCreditCard } from \"../../helpers/helpers\";\nimport AlertMessage from \"../AlertMessage\";\nimport { DateEntryItem, SectionHeaderItem, TextEntryItem } from \"../FormComponents\";\nexport default function CreditCardForm(props) {\n  const [open, setOpen] = useState(false);\n  const [alertMessage, setAlertMessage] = useState();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const encodedUrlFrom = (object, wrapper) => _.chain(object).map((val, key) => `${wrapper ? `${wrapper}[${_.snakeCase(key)}]` : _.snakeCase(key)}=${val}`).join(\"&\").value();\n\n  const onSubmit = async ({\n    cardNumber: number,\n    expDate,\n    cvc,\n    nameOnCard,\n    amount\n  }) => {\n    try {\n      const expMonth = dayjs(expDate).format(\"M\");\n      const expYear = dayjs(expDate).format(\"YYYY\");\n      const description = `Tuition payment from ${nameOnCard} on ${dayjs().format(\"M/D/YYYY @ h:mm A\")}`;\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          Authorization: `Bearer ${process.env.REACT_APP_STRIPE_SK}`\n        }\n      };\n      const {\n        data: {\n          id: source\n        }\n      } = await axios.post(\"https://api.stripe.com/v1/tokens\", encodedUrlFrom({\n        number,\n        expMonth,\n        expYear,\n        cvc\n      }, \"card\"), config);\n      const res = await axios.post(\"https://api.stripe.com/v1/charges\", encodedUrlFrom({\n        amount: amount * 100,\n        currency: \"usd\",\n        source,\n        description\n      }), config);\n      handleClose();\n      setAlertMessage( /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 2,\n        direction: \"column\",\n        alignItems: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"h6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }\n      }, \"Success!\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }\n      }, res.data.description)), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: res.data.receipt_url,\n        target: \"_blank\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }\n      }, \"View Receipt\"))));\n    } catch (err) {\n      console.error(err);\n      setAlertMessage(err.message);\n    }\n  };\n\n  const validationSchema = Yup.object().shape({\n    amount: Yup.number().required(\"Payment amount is required\")\n  });\n  const validate = makeValidate(validationSchema);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClickOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, \"Make A Payment\"), /*#__PURE__*/React.createElement(FForm, {\n    onSubmit: onSubmit,\n    initialValues: testCreditCard,\n    validate: validate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, ({\n    handleSubmit\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 29\n    }\n  }, \"Make A Payment\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(SectionHeaderItem, {\n    top: true,\n    title: \"Credit Card Information\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(TextEntryItem, {\n    name: \"cardNumber\",\n    required: true,\n    sm: 6,\n    inputProps: {\n      pattern: \"[d| ]{16,22}\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(TextEntryItem, {\n    name: \"nameOnCard\",\n    label: \"Name on Card\",\n    required: true,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(DateEntryItem, {\n    name: \"expDate\",\n    label: \"MM/YY\",\n    sm: 6,\n    required: true,\n    views: [\"year\", \"month\"],\n    format: \"MM/yy\",\n    mask: \"__/__\",\n    placeholder: \"MM/YY\",\n    minDate: new Date(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(TextEntryItem, {\n    name: \"cvc\",\n    label: \"CVC\",\n    sm: 6,\n    required: true,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(SectionHeaderItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 41\n    }\n  }, \"Payment:\")), /*#__PURE__*/React.createElement(TextEntryItem, {\n    type: \"number\",\n    name: \"amount\",\n    InputProps: {\n      startAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 49\n        }\n      }, \"$\")\n    },\n    required: true,\n    sm: 4,\n    leftLabel: \"Payment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 33\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleSubmit,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 33\n    }\n  }, \"Submit\"))))), alertMessage && /*#__PURE__*/React.createElement(AlertMessage, {\n    message: alertMessage,\n    onClose: () => setAlertMessage(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/Kronos/Documents/Programming/Web/React/CS-3750-Project/ClientApp/src/components/Tuition/CreditCardForm.js"],"names":["Button","Dialog","DialogActions","DialogContent","DialogTitle","Grid","InputAdornment","Typography","axios","dayjs","_","makeValidate","React","useState","Form","FForm","Yup","testCreditCard","AlertMessage","DateEntryItem","SectionHeaderItem","TextEntryItem","CreditCardForm","props","open","setOpen","alertMessage","setAlertMessage","handleClickOpen","handleClose","encodedUrlFrom","object","wrapper","chain","map","val","key","snakeCase","join","value","onSubmit","cardNumber","number","expDate","cvc","nameOnCard","amount","expMonth","format","expYear","description","config","headers","Authorization","process","env","REACT_APP_STRIPE_SK","data","id","source","post","res","currency","receipt_url","err","console","error","message","validationSchema","shape","required","validate","handleSubmit","pattern","Date","startAdornment"],"mappings":"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","sourcesContent":["import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Grid,\r\n    InputAdornment,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport dayjs from \"dayjs\";\r\nimport _ from \"lodash\";\r\nimport { makeValidate } from \"mui-rff\";\r\nimport React, { useState } from \"react\";\r\nimport { Form as FForm } from \"react-final-form\";\r\nimport * as Yup from \"yup\";\r\nimport { testCreditCard } from \"../../helpers/helpers\";\r\nimport AlertMessage from \"../AlertMessage\";\r\nimport {\r\n    DateEntryItem,\r\n    SectionHeaderItem,\r\n    TextEntryItem\r\n} from \"../FormComponents\";\r\n\r\nexport default function CreditCardForm(props) {\r\n    const [open, setOpen] = useState(false);\r\n    const [alertMessage, setAlertMessage] = useState();\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const encodedUrlFrom = (object, wrapper) =>\r\n        _.chain(object)\r\n            .map(\r\n                (val, key) =>\r\n                    `${\r\n                        wrapper\r\n                            ? `${wrapper}[${_.snakeCase(key)}]`\r\n                            : _.snakeCase(key)\r\n                    }=${val}`\r\n            )\r\n            .join(\"&\")\r\n            .value();\r\n\r\n    const onSubmit = async ({\r\n        cardNumber: number,\r\n        expDate,\r\n        cvc,\r\n        nameOnCard,\r\n        amount\r\n    }) => {\r\n        try {\r\n            const expMonth = dayjs(expDate).format(\"M\");\r\n            const expYear = dayjs(expDate).format(\"YYYY\");\r\n            const description = `Tuition payment from ${nameOnCard} on ${dayjs().format(\r\n                \"M/D/YYYY @ h:mm A\"\r\n            )}`;\r\n\r\n            const config = {\r\n                headers: {\r\n                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                    Authorization: `Bearer ${process.env.REACT_APP_STRIPE_SK}`\r\n                }\r\n            };\r\n\r\n            const {\r\n                data: { id: source }\r\n            } = await axios.post(\r\n                \"https://api.stripe.com/v1/tokens\",\r\n                encodedUrlFrom({ number, expMonth, expYear, cvc }, \"card\"),\r\n                config\r\n            );\r\n\r\n            const res = await axios.post(\r\n                \"https://api.stripe.com/v1/charges\",\r\n                encodedUrlFrom({\r\n                    amount: amount * 100,\r\n                    currency: \"usd\",\r\n                    source,\r\n                    description\r\n                }),\r\n                config\r\n            );\r\n\r\n            handleClose();\r\n\r\n            setAlertMessage(\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    direction=\"column\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Grid item>\r\n                        <Typography variant=\"h6\">Success!</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography variant=\"body\">\r\n                            {res.data.description}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <a href={res.data.receipt_url} target=\"_blank\">\r\n                            View Receipt\r\n                        </a>\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        } catch (err) {\r\n            console.error(err);\r\n            setAlertMessage(err.message);\r\n        }\r\n    };\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        amount: Yup.number().required(\"Payment amount is required\")\r\n    });\r\n\r\n    const validate = makeValidate(validationSchema);\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={handleClickOpen}>Make A Payment</Button>\r\n            <FForm\r\n                onSubmit={onSubmit}\r\n                initialValues={testCreditCard}\r\n                validate={validate}\r\n            >\r\n                {({ handleSubmit }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Dialog\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            aria-labelledby=\"form-dialog-title\"\r\n                        >\r\n                            <DialogTitle id=\"form-dialog-title\">\r\n                                Make A Payment\r\n                            </DialogTitle>\r\n                            <DialogContent>\r\n                                <Grid container spacing={2} justify=\"center\">\r\n                                    <SectionHeaderItem\r\n                                        top\r\n                                        title=\"Credit Card Information\"\r\n                                    />\r\n                                    <TextEntryItem\r\n                                        name=\"cardNumber\"\r\n                                        required={true}\r\n                                        sm={6}\r\n                                        inputProps={{ pattern: \"[d| ]{16,22}\" }}\r\n                                    />\r\n                                    <TextEntryItem\r\n                                        name=\"nameOnCard\"\r\n                                        label=\"Name on Card\"\r\n                                        required={true}\r\n                                        sm={6}\r\n                                    />\r\n                                    <DateEntryItem\r\n                                        name=\"expDate\"\r\n                                        label=\"MM/YY\"\r\n                                        sm={6}\r\n                                        required={true}\r\n                                        views={[\"year\", \"month\"]}\r\n                                        format=\"MM/yy\"\r\n                                        mask=\"__/__\"\r\n                                        placeholder={\"MM/YY\"}\r\n                                        minDate={new Date()}\r\n                                    />\r\n                                    <TextEntryItem\r\n                                        name=\"cvc\"\r\n                                        label=\"CVC\"\r\n                                        sm={6}\r\n                                        required={true}\r\n                                        type=\"number\"\r\n                                    />\r\n                                    <SectionHeaderItem />\r\n                                    <Grid item>\r\n                                        <Typography variant=\"h6\">\r\n                                            Payment:\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <TextEntryItem\r\n                                        type=\"number\"\r\n                                        name=\"amount\"\r\n                                        InputProps={{\r\n                                            startAdornment: (\r\n                                                <InputAdornment position=\"start\">\r\n                                                    $\r\n                                                </InputAdornment>\r\n                                            )\r\n                                        }}\r\n                                        required={true}\r\n                                        sm={4}\r\n                                        leftLabel=\"Payment\"\r\n                                    />\r\n                                </Grid>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={handleClose} color=\"primary\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button onClick={handleSubmit} color=\"primary\">\r\n                                    Submit\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                    </form>\r\n                )}\r\n            </FForm>\r\n            {alertMessage && (\r\n                <AlertMessage\r\n                    message={alertMessage}\r\n                    onClose={() => setAlertMessage(null)}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}