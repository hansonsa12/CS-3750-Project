{"ast":null,"code":"'use strict';\n\nmodule.exports = function (Chart) {\n  // Global Chart canvas helpers object for drawing items to canvas\n  var helpers = Chart.canvasHelpers = {};\n\n  helpers.drawPoint = function (ctx, pointStyle, radius, x, y) {\n    var type, edgeLength, xOffset, yOffset, height, size;\n\n    if (typeof pointStyle === 'object') {\n      type = pointStyle.toString();\n\n      if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n        ctx.drawImage(pointStyle, x - pointStyle.width / 2, y - pointStyle.height / 2);\n        return;\n      }\n    }\n\n    if (isNaN(radius) || radius <= 0) {\n      return;\n    }\n\n    switch (pointStyle) {\n      // Default includes circle\n      default:\n        ctx.beginPath();\n        ctx.arc(x, y, radius, 0, Math.PI * 2);\n        ctx.closePath();\n        ctx.fill();\n        break;\n\n      case 'triangle':\n        ctx.beginPath();\n        edgeLength = 3 * radius / Math.sqrt(3);\n        height = edgeLength * Math.sqrt(3) / 2;\n        ctx.moveTo(x - edgeLength / 2, y + height / 3);\n        ctx.lineTo(x + edgeLength / 2, y + height / 3);\n        ctx.lineTo(x, y - 2 * height / 3);\n        ctx.closePath();\n        ctx.fill();\n        break;\n\n      case 'rect':\n        size = 1 / Math.SQRT2 * radius;\n        ctx.beginPath();\n        ctx.fillRect(x - size, y - size, 2 * size, 2 * size);\n        ctx.strokeRect(x - size, y - size, 2 * size, 2 * size);\n        break;\n\n      case 'rectRounded':\n        var offset = radius / Math.SQRT2;\n        var leftX = x - offset;\n        var topY = y - offset;\n        var sideSize = Math.SQRT2 * radius;\n        Chart.helpers.drawRoundedRectangle(ctx, leftX, topY, sideSize, sideSize, radius / 2);\n        ctx.fill();\n        break;\n\n      case 'rectRot':\n        size = 1 / Math.SQRT2 * radius;\n        ctx.beginPath();\n        ctx.moveTo(x - size, y);\n        ctx.lineTo(x, y + size);\n        ctx.lineTo(x + size, y);\n        ctx.lineTo(x, y - size);\n        ctx.closePath();\n        ctx.fill();\n        break;\n\n      case 'cross':\n        ctx.beginPath();\n        ctx.moveTo(x, y + radius);\n        ctx.lineTo(x, y - radius);\n        ctx.moveTo(x - radius, y);\n        ctx.lineTo(x + radius, y);\n        ctx.closePath();\n        break;\n\n      case 'crossRot':\n        ctx.beginPath();\n        xOffset = Math.cos(Math.PI / 4) * radius;\n        yOffset = Math.sin(Math.PI / 4) * radius;\n        ctx.moveTo(x - xOffset, y - yOffset);\n        ctx.lineTo(x + xOffset, y + yOffset);\n        ctx.moveTo(x - xOffset, y + yOffset);\n        ctx.lineTo(x + xOffset, y - yOffset);\n        ctx.closePath();\n        break;\n\n      case 'star':\n        ctx.beginPath();\n        ctx.moveTo(x, y + radius);\n        ctx.lineTo(x, y - radius);\n        ctx.moveTo(x - radius, y);\n        ctx.lineTo(x + radius, y);\n        xOffset = Math.cos(Math.PI / 4) * radius;\n        yOffset = Math.sin(Math.PI / 4) * radius;\n        ctx.moveTo(x - xOffset, y - yOffset);\n        ctx.lineTo(x + xOffset, y + yOffset);\n        ctx.moveTo(x - xOffset, y + yOffset);\n        ctx.lineTo(x + xOffset, y - yOffset);\n        ctx.closePath();\n        break;\n\n      case 'line':\n        ctx.beginPath();\n        ctx.moveTo(x - radius, y);\n        ctx.lineTo(x + radius, y);\n        ctx.closePath();\n        break;\n\n      case 'dash':\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + radius, y);\n        ctx.closePath();\n        break;\n    }\n\n    ctx.stroke();\n  };\n\n  helpers.clipArea = function (ctx, clipArea) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(clipArea.left, clipArea.top, clipArea.right - clipArea.left, clipArea.bottom - clipArea.top);\n    ctx.clip();\n  };\n\n  helpers.unclipArea = function (ctx) {\n    ctx.restore();\n  };\n};","map":{"version":3,"sources":["C:/Users/Kronos/Documents/Programming/Web/React/CS-3750-Project/ClientApp/node_modules/chart.js/src/core/core.canvasHelpers.js"],"names":["module","exports","Chart","helpers","canvasHelpers","drawPoint","ctx","pointStyle","radius","x","y","type","edgeLength","xOffset","yOffset","height","size","toString","drawImage","width","isNaN","beginPath","arc","Math","PI","closePath","fill","sqrt","moveTo","lineTo","SQRT2","fillRect","strokeRect","offset","leftX","topY","sideSize","drawRoundedRectangle","cos","sin","stroke","clipArea","save","rect","left","top","right","bottom","clip","unclipArea","restore"],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = function(Chart) {\n\t// Global Chart canvas helpers object for drawing items to canvas\n\tvar helpers = Chart.canvasHelpers = {};\n\n\thelpers.drawPoint = function(ctx, pointStyle, radius, x, y) {\n\t\tvar type, edgeLength, xOffset, yOffset, height, size;\n\n\t\tif (typeof pointStyle === 'object') {\n\t\t\ttype = pointStyle.toString();\n\t\t\tif (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n\t\t\t\tctx.drawImage(pointStyle, x - pointStyle.width / 2, y - pointStyle.height / 2);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (isNaN(radius) || radius <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (pointStyle) {\n\t\t// Default includes circle\n\t\tdefault:\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(x, y, radius, 0, Math.PI * 2);\n\t\t\tctx.closePath();\n\t\t\tctx.fill();\n\t\t\tbreak;\n\t\tcase 'triangle':\n\t\t\tctx.beginPath();\n\t\t\tedgeLength = 3 * radius / Math.sqrt(3);\n\t\t\theight = edgeLength * Math.sqrt(3) / 2;\n\t\t\tctx.moveTo(x - edgeLength / 2, y + height / 3);\n\t\t\tctx.lineTo(x + edgeLength / 2, y + height / 3);\n\t\t\tctx.lineTo(x, y - 2 * height / 3);\n\t\t\tctx.closePath();\n\t\t\tctx.fill();\n\t\t\tbreak;\n\t\tcase 'rect':\n\t\t\tsize = 1 / Math.SQRT2 * radius;\n\t\t\tctx.beginPath();\n\t\t\tctx.fillRect(x - size, y - size, 2 * size, 2 * size);\n\t\t\tctx.strokeRect(x - size, y - size, 2 * size, 2 * size);\n\t\t\tbreak;\n\t\tcase 'rectRounded':\n\t\t\tvar offset = radius / Math.SQRT2;\n\t\t\tvar leftX = x - offset;\n\t\t\tvar topY = y - offset;\n\t\t\tvar sideSize = Math.SQRT2 * radius;\n\t\t\tChart.helpers.drawRoundedRectangle(ctx, leftX, topY, sideSize, sideSize, radius / 2);\n\t\t\tctx.fill();\n\t\t\tbreak;\n\t\tcase 'rectRot':\n\t\t\tsize = 1 / Math.SQRT2 * radius;\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x - size, y);\n\t\t\tctx.lineTo(x, y + size);\n\t\t\tctx.lineTo(x + size, y);\n\t\t\tctx.lineTo(x, y - size);\n\t\t\tctx.closePath();\n\t\t\tctx.fill();\n\t\t\tbreak;\n\t\tcase 'cross':\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x, y + radius);\n\t\t\tctx.lineTo(x, y - radius);\n\t\t\tctx.moveTo(x - radius, y);\n\t\t\tctx.lineTo(x + radius, y);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'crossRot':\n\t\t\tctx.beginPath();\n\t\t\txOffset = Math.cos(Math.PI / 4) * radius;\n\t\t\tyOffset = Math.sin(Math.PI / 4) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x - xOffset, y + yOffset);\n\t\t\tctx.lineTo(x + xOffset, y - yOffset);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'star':\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x, y + radius);\n\t\t\tctx.lineTo(x, y - radius);\n\t\t\tctx.moveTo(x - radius, y);\n\t\t\tctx.lineTo(x + radius, y);\n\t\t\txOffset = Math.cos(Math.PI / 4) * radius;\n\t\t\tyOffset = Math.sin(Math.PI / 4) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x - xOffset, y + yOffset);\n\t\t\tctx.lineTo(x + xOffset, y - yOffset);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'line':\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x - radius, y);\n\t\t\tctx.lineTo(x + radius, y);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'dash':\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x, y);\n\t\t\tctx.lineTo(x + radius, y);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\t}\n\n\t\tctx.stroke();\n\t};\n\n\thelpers.clipArea = function(ctx, clipArea) {\n\t\tctx.save();\n\t\tctx.beginPath();\n\t\tctx.rect(clipArea.left, clipArea.top, clipArea.right - clipArea.left, clipArea.bottom - clipArea.top);\n\t\tctx.clip();\n\t};\n\n\thelpers.unclipArea = function(ctx) {\n\t\tctx.restore();\n\t};\n\n};\n"]},"metadata":{},"sourceType":"script"}