{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kronos\\\\Documents\\\\Programming\\\\Web\\\\React\\\\CS-3750-Project\\\\ClientApp\\\\src\\\\components\\\\Assignments\\\\AssignmentSubmissionForm.js\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { makeValidate } from \"mui-rff\";\nimport React, { useContext } from \"react\";\nimport { Form as FForm } from \"react-final-form\";\nimport * as Yup from \"yup\";\nimport { AuthContext } from \"../../context/AuthProvider\";\nimport { AssignmentType, getFormattedDateTime } from \"../../helpers/helpers\";\nimport DetailsContainer from \"../DetailsContainer\";\nimport { SectionHeaderItem, TextEntryItem } from \"../FormComponents\";\nexport default function AssignmentSubmissionForm({\n  assignment,\n  children\n}) {\n  const {\n    user,\n    authHeader\n  } = useContext(AuthContext);\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const onSubmit = values => {\n    axios.request({\n      url: `api/assignments/${values.assignmentId}/submissions`,\n      method: \"POST\",\n      ...authHeader,\n      data: values\n    }).then(res => {\n      alert(\"Assignment successfully submitted!\");\n      window.location.reload();\n    }).catch((err, res) => {\n      alert(`${err.message}:\\n${err.response.data.error}`);\n    });\n  };\n\n  const validationSchema = Yup.object().shape({\n    submission: Yup.string().required(\"Submission is required\")\n  });\n  const validate = makeValidate(validationSchema);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    key: \"course-form-open-button\",\n    onClick: handleClickOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, children), /*#__PURE__*/React.createElement(FForm, {\n    onSubmit: onSubmit,\n    initialValues: {\n      assignmentId: assignment.assignmentId,\n      studentId: user.userId\n    },\n    validate: validate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, ({\n    handleSubmit\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 29\n    }\n  }, \"Submit Assignment\"), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(SectionHeaderItem, {\n    top: true,\n    title: \"Assignment Information\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(DetailsContainer, {\n    object: assignment,\n    specialFormatters: {\n      dueDate: d => getFormattedDateTime(d)\n    },\n    omitProperties: [\"assignmentId\", \"courseId\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(SectionHeaderItem, {\n    title: \"Submission\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 37\n    }\n  }), assignment.assignmentType === AssignmentType.TEXT_ENTRY ? /*#__PURE__*/React.createElement(TextEntryItem, {\n    name: \"submission\",\n    label: \"Submission Text\",\n    rows: 6,\n    multiline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 41\n    }\n  }) : /*#__PURE__*/React.createElement(TextEntryItem, {\n    name: \"submission\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 41\n    }\n  }))), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 33\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleSubmit,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 33\n    }\n  }, \"Submit\"))))));\n}","map":{"version":3,"sources":["C:/Users/Kronos/Documents/Programming/Web/React/CS-3750-Project/ClientApp/src/components/Assignments/AssignmentSubmissionForm.js"],"names":["Button","Dialog","DialogActions","DialogContent","DialogTitle","Grid","axios","makeValidate","React","useContext","Form","FForm","Yup","AuthContext","AssignmentType","getFormattedDateTime","DetailsContainer","SectionHeaderItem","TextEntryItem","AssignmentSubmissionForm","assignment","children","user","authHeader","open","setOpen","useState","handleClickOpen","handleClose","onSubmit","values","request","url","assignmentId","method","data","then","res","alert","window","location","reload","catch","err","message","response","error","validationSchema","object","shape","submission","string","required","validate","studentId","userId","handleSubmit","dueDate","d","assignmentType","TEXT_ENTRY"],"mappings":"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","sourcesContent":["import {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Grid\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { makeValidate } from \"mui-rff\";\r\nimport React, { useContext } from \"react\";\r\nimport { Form as FForm } from \"react-final-form\";\r\nimport * as Yup from \"yup\";\r\nimport { AuthContext } from \"../../context/AuthProvider\";\r\nimport { AssignmentType, getFormattedDateTime } from \"../../helpers/helpers\";\r\nimport DetailsContainer from \"../DetailsContainer\";\r\nimport { SectionHeaderItem, TextEntryItem } from \"../FormComponents\";\r\n\r\nexport default function AssignmentSubmissionForm({ assignment, children }) {\r\n    const { user, authHeader } = useContext(AuthContext);\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const onSubmit = values => {\r\n        axios\r\n            .request({\r\n                url: `api/assignments/${values.assignmentId}/submissions`,\r\n                method: \"POST\",\r\n                ...authHeader,\r\n                data: values\r\n            })\r\n            .then(res => {\r\n                alert(\"Assignment successfully submitted!\");\r\n                window.location.reload();\r\n            })\r\n            .catch((err, res) => {\r\n                alert(`${err.message}:\\n${err.response.data.error}`);\r\n            });\r\n    };\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        submission: Yup.string().required(\"Submission is required\")\r\n    });\r\n\r\n    const validate = makeValidate(validationSchema);\r\n    return (\r\n        <div>\r\n            <div key=\"course-form-open-button\" onClick={handleClickOpen}>\r\n                {children}\r\n            </div>\r\n            <FForm\r\n                onSubmit={onSubmit}\r\n                initialValues={{\r\n                    assignmentId: assignment.assignmentId,\r\n                    studentId: user.userId\r\n                }}\r\n                validate={validate}\r\n            >\r\n                {({ handleSubmit }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Dialog\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            aria-labelledby=\"form-dialog-title\"\r\n                        >\r\n                            <DialogTitle id=\"form-dialog-title\">\r\n                                Submit Assignment\r\n                            </DialogTitle>\r\n                            <DialogContent>\r\n                                <Grid\r\n                                    container\r\n                                    spacing={2}\r\n                                    justify=\"space-between\"\r\n                                >\r\n                                    <SectionHeaderItem\r\n                                        top\r\n                                        title=\"Assignment Information\"\r\n                                    />\r\n                                    <Grid item xs={12}>\r\n                                        <DetailsContainer\r\n                                            object={assignment}\r\n                                            specialFormatters={{\r\n                                                dueDate: d =>\r\n                                                    getFormattedDateTime(d)\r\n                                            }}\r\n                                            omitProperties={[\r\n                                                \"assignmentId\",\r\n                                                \"courseId\"\r\n                                            ]}\r\n                                        />\r\n                                    </Grid>\r\n                                    <SectionHeaderItem title=\"Submission\" />\r\n                                    {assignment.assignmentType ===\r\n                                    AssignmentType.TEXT_ENTRY ? (\r\n                                        <TextEntryItem\r\n                                            name=\"submission\"\r\n                                            label=\"Submission Text\"\r\n                                            rows={6}\r\n                                            multiline\r\n                                        />\r\n                                    ) : (\r\n                                        <TextEntryItem name=\"submission\" />\r\n                                    )}\r\n                                </Grid>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={handleClose} color=\"primary\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button onClick={handleSubmit} color=\"primary\">\r\n                                    Submit\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                    </form>\r\n                )}\r\n            </FForm>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}