{"ast":null,"code":"'use strict';\n\nmodule.exports = function (Chart) {\n  var helpers = Chart.helpers,\n      defaults = Chart.defaults;\n  defaults.doughnut = {\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    aspectRatio: 1,\n    hover: {\n      mode: 'single'\n    },\n    legendCallback: function (chart) {\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n      var data = chart.data;\n      var datasets = data.datasets;\n      var labels = data.labels;\n\n      if (datasets.length) {\n        for (var i = 0; i < datasets[0].data.length; ++i) {\n          text.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\n          if (labels[i]) {\n            text.push(labels[i]);\n          }\n\n          text.push('</li>');\n        }\n      }\n\n      text.push('</ul>');\n      return text.join('');\n    },\n    legend: {\n      labels: {\n        generateLabels: function (chart) {\n          var data = chart.data;\n\n          if (data.labels.length && data.datasets.length) {\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var ds = data.datasets[0];\n              var arc = meta.data[i];\n              var custom = arc && arc.custom || {};\n              var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;\n              var arcOpts = chart.options.elements.arc;\n              var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);\n              var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);\n              var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);\n              return {\n                text: label,\n                fillStyle: fill,\n                strokeStyle: stroke,\n                lineWidth: bw,\n                hidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n                // Extra data used for toggling the correct item\n                index: i\n              };\n            });\n          }\n\n          return [];\n        }\n      },\n      onClick: function (e, legendItem) {\n        var index = legendItem.index;\n        var chart = this.chart;\n        var i, ilen, meta;\n\n        for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n          meta = chart.getDatasetMeta(i); // toggle visibility of index if exists\n\n          if (meta.data[index]) {\n            meta.data[index].hidden = !meta.data[index].hidden;\n          }\n        }\n\n        chart.update();\n      }\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutoutPercentage: 50,\n    // The rotation of the chart, where the first data arc begins.\n    rotation: Math.PI * -0.5,\n    // The total circumference of the chart.\n    circumference: Math.PI * 2.0,\n    // Need to override these to give a nice default\n    tooltips: {\n      callbacks: {\n        title: function () {\n          return '';\n        },\n        label: function (tooltipItem, data) {\n          var dataLabel = data.labels[tooltipItem.index];\n          var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\n          if (helpers.isArray(dataLabel)) {\n            // show value on first line of multiline label\n            // need to clone because we are changing the value\n            dataLabel = dataLabel.slice();\n            dataLabel[0] += value;\n          } else {\n            dataLabel += value;\n          }\n\n          return dataLabel;\n        }\n      }\n    }\n  };\n  defaults.pie = helpers.clone(defaults.doughnut);\n  helpers.extend(defaults.pie, {\n    cutoutPercentage: 0\n  });\n  Chart.controllers.doughnut = Chart.controllers.pie = Chart.DatasetController.extend({\n    dataElementType: Chart.elements.Arc,\n    linkScales: helpers.noop,\n    // Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly\n    getRingIndex: function (datasetIndex) {\n      var ringIndex = 0;\n\n      for (var j = 0; j < datasetIndex; ++j) {\n        if (this.chart.isDatasetVisible(j)) {\n          ++ringIndex;\n        }\n      }\n\n      return ringIndex;\n    },\n    update: function (reset) {\n      var me = this;\n      var chart = me.chart,\n          chartArea = chart.chartArea,\n          opts = chart.options,\n          arcOpts = opts.elements.arc,\n          availableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth,\n          availableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth,\n          minSize = Math.min(availableWidth, availableHeight),\n          offset = {\n        x: 0,\n        y: 0\n      },\n          meta = me.getMeta(),\n          cutoutPercentage = opts.cutoutPercentage,\n          circumference = opts.circumference; // If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc\n\n      if (circumference < Math.PI * 2.0) {\n        var startAngle = opts.rotation % (Math.PI * 2.0);\n        startAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);\n        var endAngle = startAngle + circumference;\n        var start = {\n          x: Math.cos(startAngle),\n          y: Math.sin(startAngle)\n        };\n        var end = {\n          x: Math.cos(endAngle),\n          y: Math.sin(endAngle)\n        };\n        var contains0 = startAngle <= 0 && 0 <= endAngle || startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle;\n        var contains90 = startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle;\n        var contains180 = startAngle <= -Math.PI && -Math.PI <= endAngle || startAngle <= Math.PI && Math.PI <= endAngle;\n        var contains270 = startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle;\n        var cutout = cutoutPercentage / 100.0;\n        var min = {\n          x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)),\n          y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))\n        };\n        var max = {\n          x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)),\n          y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))\n        };\n        var size = {\n          width: (max.x - min.x) * 0.5,\n          height: (max.y - min.y) * 0.5\n        };\n        minSize = Math.min(availableWidth / size.width, availableHeight / size.height);\n        offset = {\n          x: (max.x + min.x) * -0.5,\n          y: (max.y + min.y) * -0.5\n        };\n      }\n\n      chart.borderWidth = me.getMaxBorderWidth(meta.data);\n      chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);\n      chart.innerRadius = Math.max(cutoutPercentage ? chart.outerRadius / 100 * cutoutPercentage : 0, 0);\n      chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();\n      chart.offsetX = offset.x * chart.outerRadius;\n      chart.offsetY = offset.y * chart.outerRadius;\n      meta.total = me.calculateTotal();\n      me.outerRadius = chart.outerRadius - chart.radiusLength * me.getRingIndex(me.index);\n      me.innerRadius = Math.max(me.outerRadius - chart.radiusLength, 0);\n      helpers.each(meta.data, function (arc, index) {\n        me.updateElement(arc, index, reset);\n      });\n    },\n    updateElement: function (arc, index, reset) {\n      var me = this;\n      var chart = me.chart,\n          chartArea = chart.chartArea,\n          opts = chart.options,\n          animationOpts = opts.animation,\n          centerX = (chartArea.left + chartArea.right) / 2,\n          centerY = (chartArea.top + chartArea.bottom) / 2,\n          startAngle = opts.rotation,\n          // non reset case handled later\n      endAngle = opts.rotation,\n          // non reset case handled later\n      dataset = me.getDataset(),\n          circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI)),\n          innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius,\n          outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius,\n          valueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;\n      helpers.extend(arc, {\n        // Utility\n        _datasetIndex: me.index,\n        _index: index,\n        // Desired view properties\n        _model: {\n          x: centerX + chart.offsetX,\n          y: centerY + chart.offsetY,\n          startAngle: startAngle,\n          endAngle: endAngle,\n          circumference: circumference,\n          outerRadius: outerRadius,\n          innerRadius: innerRadius,\n          label: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])\n        }\n      });\n      var model = arc._model; // Resets the visual styles\n\n      this.removeHoverStyle(arc); // Set correct angles if not resetting\n\n      if (!reset || !animationOpts.animateRotate) {\n        if (index === 0) {\n          model.startAngle = opts.rotation;\n        } else {\n          model.startAngle = me.getMeta().data[index - 1]._model.endAngle;\n        }\n\n        model.endAngle = model.startAngle + model.circumference;\n      }\n\n      arc.pivot();\n    },\n    removeHoverStyle: function (arc) {\n      Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);\n    },\n    calculateTotal: function () {\n      var dataset = this.getDataset();\n      var meta = this.getMeta();\n      var total = 0;\n      var value;\n      helpers.each(meta.data, function (element, index) {\n        value = dataset.data[index];\n\n        if (!isNaN(value) && !element.hidden) {\n          total += Math.abs(value);\n        }\n      });\n      /* if (total === 0) {\n      \ttotal = NaN;\n      }*/\n\n      return total;\n    },\n    calculateCircumference: function (value) {\n      var total = this.getMeta().total;\n\n      if (total > 0 && !isNaN(value)) {\n        return Math.PI * 2.0 * (value / total);\n      }\n\n      return 0;\n    },\n    // gets the max border or hover width to properly scale pie charts\n    getMaxBorderWidth: function (elements) {\n      var max = 0,\n          index = this.index,\n          length = elements.length,\n          borderWidth,\n          hoverWidth;\n\n      for (var i = 0; i < length; i++) {\n        borderWidth = elements[i]._model ? elements[i]._model.borderWidth : 0;\n        hoverWidth = elements[i]._chart ? elements[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;\n        max = borderWidth > max ? borderWidth : max;\n        max = hoverWidth > max ? hoverWidth : max;\n      }\n\n      return max;\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/Kronos/Documents/Programming/Web/React/CS-3750-Project/ClientApp/node_modules/chart.js/src/controllers/controller.doughnut.js"],"names":["module","exports","Chart","helpers","defaults","doughnut","animation","animateRotate","animateScale","aspectRatio","hover","mode","legendCallback","chart","text","push","id","data","datasets","labels","length","i","backgroundColor","join","legend","generateLabels","map","label","meta","getDatasetMeta","ds","arc","custom","getValueAtIndexOrDefault","arcOpts","options","elements","fill","stroke","borderColor","bw","borderWidth","fillStyle","strokeStyle","lineWidth","hidden","isNaN","index","onClick","e","legendItem","ilen","update","cutoutPercentage","rotation","Math","PI","circumference","tooltips","callbacks","title","tooltipItem","dataLabel","value","datasetIndex","isArray","slice","pie","clone","extend","controllers","DatasetController","dataElementType","Arc","linkScales","noop","getRingIndex","ringIndex","j","isDatasetVisible","reset","me","chartArea","opts","availableWidth","right","left","availableHeight","bottom","top","minSize","min","offset","x","y","getMeta","startAngle","endAngle","start","cos","sin","end","contains0","contains90","contains180","contains270","cutout","max","size","width","height","getMaxBorderWidth","outerRadius","innerRadius","radiusLength","getVisibleDatasetCount","offsetX","offsetY","total","calculateTotal","each","updateElement","animationOpts","centerX","centerY","dataset","getDataset","calculateCircumference","valueAtIndexOrDefault","_datasetIndex","_index","_model","model","removeHoverStyle","pivot","prototype","call","element","abs","hoverWidth","_chart","config","hoverBorderWidth"],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = function(Chart) {\n\n\tvar helpers = Chart.helpers,\n\t\tdefaults = Chart.defaults;\n\n\tdefaults.doughnut = {\n\t\tanimation: {\n\t\t\t// Boolean - Whether we animate the rotation of the Doughnut\n\t\t\tanimateRotate: true,\n\t\t\t// Boolean - Whether we animate scaling the Doughnut from the centre\n\t\t\tanimateScale: false\n\t\t},\n\t\taspectRatio: 1,\n\t\thover: {\n\t\t\tmode: 'single'\n\t\t},\n\t\tlegendCallback: function(chart) {\n\t\t\tvar text = [];\n\t\t\ttext.push('<ul class=\"' + chart.id + '-legend\">');\n\n\t\t\tvar data = chart.data;\n\t\t\tvar datasets = data.datasets;\n\t\t\tvar labels = data.labels;\n\n\t\t\tif (datasets.length) {\n\t\t\t\tfor (var i = 0; i < datasets[0].data.length; ++i) {\n\t\t\t\t\ttext.push('<li><span style=\"background-color:' + datasets[0].backgroundColor[i] + '\"></span>');\n\t\t\t\t\tif (labels[i]) {\n\t\t\t\t\t\ttext.push(labels[i]);\n\t\t\t\t\t}\n\t\t\t\t\ttext.push('</li>');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttext.push('</ul>');\n\t\t\treturn text.join('');\n\t\t},\n\t\tlegend: {\n\t\t\tlabels: {\n\t\t\t\tgenerateLabels: function(chart) {\n\t\t\t\t\tvar data = chart.data;\n\t\t\t\t\tif (data.labels.length && data.datasets.length) {\n\t\t\t\t\t\treturn data.labels.map(function(label, i) {\n\t\t\t\t\t\t\tvar meta = chart.getDatasetMeta(0);\n\t\t\t\t\t\t\tvar ds = data.datasets[0];\n\t\t\t\t\t\t\tvar arc = meta.data[i];\n\t\t\t\t\t\t\tvar custom = arc && arc.custom || {};\n\t\t\t\t\t\t\tvar getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;\n\t\t\t\t\t\t\tvar arcOpts = chart.options.elements.arc;\n\t\t\t\t\t\t\tvar fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);\n\t\t\t\t\t\t\tvar stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);\n\t\t\t\t\t\t\tvar bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);\n\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\ttext: label,\n\t\t\t\t\t\t\t\tfillStyle: fill,\n\t\t\t\t\t\t\t\tstrokeStyle: stroke,\n\t\t\t\t\t\t\t\tlineWidth: bw,\n\t\t\t\t\t\t\t\thidden: isNaN(ds.data[i]) || meta.data[i].hidden,\n\n\t\t\t\t\t\t\t\t// Extra data used for toggling the correct item\n\t\t\t\t\t\t\t\tindex: i\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tonClick: function(e, legendItem) {\n\t\t\t\tvar index = legendItem.index;\n\t\t\t\tvar chart = this.chart;\n\t\t\t\tvar i, ilen, meta;\n\n\t\t\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\t\t// toggle visibility of index if exists\n\t\t\t\t\tif (meta.data[index]) {\n\t\t\t\t\t\tmeta.data[index].hidden = !meta.data[index].hidden;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tchart.update();\n\t\t\t}\n\t\t},\n\n\t\t// The percentage of the chart that we cut out of the middle.\n\t\tcutoutPercentage: 50,\n\n\t\t// The rotation of the chart, where the first data arc begins.\n\t\trotation: Math.PI * -0.5,\n\n\t\t// The total circumference of the chart.\n\t\tcircumference: Math.PI * 2.0,\n\n\t\t// Need to override these to give a nice default\n\t\ttooltips: {\n\t\t\tcallbacks: {\n\t\t\t\ttitle: function() {\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\t\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\t\tvar dataLabel = data.labels[tooltipItem.index];\n\t\t\t\t\tvar value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\n\t\t\t\t\tif (helpers.isArray(dataLabel)) {\n\t\t\t\t\t\t// show value on first line of multiline label\n\t\t\t\t\t\t// need to clone because we are changing the value\n\t\t\t\t\t\tdataLabel = dataLabel.slice();\n\t\t\t\t\t\tdataLabel[0] += value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdataLabel += value;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn dataLabel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tdefaults.pie = helpers.clone(defaults.doughnut);\n\thelpers.extend(defaults.pie, {\n\t\tcutoutPercentage: 0\n\t});\n\n\n\tChart.controllers.doughnut = Chart.controllers.pie = Chart.DatasetController.extend({\n\n\t\tdataElementType: Chart.elements.Arc,\n\n\t\tlinkScales: helpers.noop,\n\n\t\t// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly\n\t\tgetRingIndex: function(datasetIndex) {\n\t\t\tvar ringIndex = 0;\n\n\t\t\tfor (var j = 0; j < datasetIndex; ++j) {\n\t\t\t\tif (this.chart.isDatasetVisible(j)) {\n\t\t\t\t\t++ringIndex;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ringIndex;\n\t\t},\n\n\t\tupdate: function(reset) {\n\t\t\tvar me = this;\n\t\t\tvar chart = me.chart,\n\t\t\t\tchartArea = chart.chartArea,\n\t\t\t\topts = chart.options,\n\t\t\t\tarcOpts = opts.elements.arc,\n\t\t\t\tavailableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth,\n\t\t\t\tavailableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth,\n\t\t\t\tminSize = Math.min(availableWidth, availableHeight),\n\t\t\t\toffset = {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0\n\t\t\t\t},\n\t\t\t\tmeta = me.getMeta(),\n\t\t\t\tcutoutPercentage = opts.cutoutPercentage,\n\t\t\t\tcircumference = opts.circumference;\n\n\t\t\t// If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc\n\t\t\tif (circumference < Math.PI * 2.0) {\n\t\t\t\tvar startAngle = opts.rotation % (Math.PI * 2.0);\n\t\t\t\tstartAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);\n\t\t\t\tvar endAngle = startAngle + circumference;\n\t\t\t\tvar start = {x: Math.cos(startAngle), y: Math.sin(startAngle)};\n\t\t\t\tvar end = {x: Math.cos(endAngle), y: Math.sin(endAngle)};\n\t\t\t\tvar contains0 = (startAngle <= 0 && 0 <= endAngle) || (startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle);\n\t\t\t\tvar contains90 = (startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle);\n\t\t\t\tvar contains180 = (startAngle <= -Math.PI && -Math.PI <= endAngle) || (startAngle <= Math.PI && Math.PI <= endAngle);\n\t\t\t\tvar contains270 = (startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle);\n\t\t\t\tvar cutout = cutoutPercentage / 100.0;\n\t\t\t\tvar min = {x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)), y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))};\n\t\t\t\tvar max = {x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)), y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))};\n\t\t\t\tvar size = {width: (max.x - min.x) * 0.5, height: (max.y - min.y) * 0.5};\n\t\t\t\tminSize = Math.min(availableWidth / size.width, availableHeight / size.height);\n\t\t\t\toffset = {x: (max.x + min.x) * -0.5, y: (max.y + min.y) * -0.5};\n\t\t\t}\n\n\t\t\tchart.borderWidth = me.getMaxBorderWidth(meta.data);\n\t\t\tchart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);\n\t\t\tchart.innerRadius = Math.max(cutoutPercentage ? (chart.outerRadius / 100) * (cutoutPercentage) : 0, 0);\n\t\t\tchart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();\n\t\t\tchart.offsetX = offset.x * chart.outerRadius;\n\t\t\tchart.offsetY = offset.y * chart.outerRadius;\n\n\t\t\tmeta.total = me.calculateTotal();\n\n\t\t\tme.outerRadius = chart.outerRadius - (chart.radiusLength * me.getRingIndex(me.index));\n\t\t\tme.innerRadius = Math.max(me.outerRadius - chart.radiusLength, 0);\n\n\t\t\thelpers.each(meta.data, function(arc, index) {\n\t\t\t\tme.updateElement(arc, index, reset);\n\t\t\t});\n\t\t},\n\n\t\tupdateElement: function(arc, index, reset) {\n\t\t\tvar me = this;\n\t\t\tvar chart = me.chart,\n\t\t\t\tchartArea = chart.chartArea,\n\t\t\t\topts = chart.options,\n\t\t\t\tanimationOpts = opts.animation,\n\t\t\t\tcenterX = (chartArea.left + chartArea.right) / 2,\n\t\t\t\tcenterY = (chartArea.top + chartArea.bottom) / 2,\n\t\t\t\tstartAngle = opts.rotation, // non reset case handled later\n\t\t\t\tendAngle = opts.rotation, // non reset case handled later\n\t\t\t\tdataset = me.getDataset(),\n\t\t\t\tcircumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI)),\n\t\t\t\tinnerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius,\n\t\t\t\touterRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius,\n\t\t\t\tvalueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;\n\n\t\t\thelpers.extend(arc, {\n\t\t\t\t// Utility\n\t\t\t\t_datasetIndex: me.index,\n\t\t\t\t_index: index,\n\n\t\t\t\t// Desired view properties\n\t\t\t\t_model: {\n\t\t\t\t\tx: centerX + chart.offsetX,\n\t\t\t\t\ty: centerY + chart.offsetY,\n\t\t\t\t\tstartAngle: startAngle,\n\t\t\t\t\tendAngle: endAngle,\n\t\t\t\t\tcircumference: circumference,\n\t\t\t\t\touterRadius: outerRadius,\n\t\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\t\tlabel: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tvar model = arc._model;\n\t\t\t// Resets the visual styles\n\t\t\tthis.removeHoverStyle(arc);\n\n\t\t\t// Set correct angles if not resetting\n\t\t\tif (!reset || !animationOpts.animateRotate) {\n\t\t\t\tif (index === 0) {\n\t\t\t\t\tmodel.startAngle = opts.rotation;\n\t\t\t\t} else {\n\t\t\t\t\tmodel.startAngle = me.getMeta().data[index - 1]._model.endAngle;\n\t\t\t\t}\n\n\t\t\t\tmodel.endAngle = model.startAngle + model.circumference;\n\t\t\t}\n\n\t\t\tarc.pivot();\n\t\t},\n\n\t\tremoveHoverStyle: function(arc) {\n\t\t\tChart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);\n\t\t},\n\n\t\tcalculateTotal: function() {\n\t\t\tvar dataset = this.getDataset();\n\t\t\tvar meta = this.getMeta();\n\t\t\tvar total = 0;\n\t\t\tvar value;\n\n\t\t\thelpers.each(meta.data, function(element, index) {\n\t\t\t\tvalue = dataset.data[index];\n\t\t\t\tif (!isNaN(value) && !element.hidden) {\n\t\t\t\t\ttotal += Math.abs(value);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/* if (total === 0) {\n\t\t\t\ttotal = NaN;\n\t\t\t}*/\n\n\t\t\treturn total;\n\t\t},\n\n\t\tcalculateCircumference: function(value) {\n\t\t\tvar total = this.getMeta().total;\n\t\t\tif (total > 0 && !isNaN(value)) {\n\t\t\t\treturn (Math.PI * 2.0) * (value / total);\n\t\t\t}\n\t\t\treturn 0;\n\t\t},\n\n\t\t// gets the max border or hover width to properly scale pie charts\n\t\tgetMaxBorderWidth: function(elements) {\n\t\t\tvar max = 0,\n\t\t\t\tindex = this.index,\n\t\t\t\tlength = elements.length,\n\t\t\t\tborderWidth,\n\t\t\t\thoverWidth;\n\n\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\tborderWidth = elements[i]._model ? elements[i]._model.borderWidth : 0;\n\t\t\t\thoverWidth = elements[i]._chart ? elements[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;\n\n\t\t\t\tmax = borderWidth > max ? borderWidth : max;\n\t\t\t\tmax = hoverWidth > max ? hoverWidth : max;\n\t\t\t}\n\t\t\treturn max;\n\t\t}\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}