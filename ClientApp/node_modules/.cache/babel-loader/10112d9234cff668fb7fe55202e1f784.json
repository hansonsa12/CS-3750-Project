{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kronos\\\\Documents\\\\Programming\\\\Web\\\\React\\\\CS-3750-Project\\\\ClientApp\\\\src\\\\components\\\\Calendar.js\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\"; // must come after FullCalendar import\n\nimport React, { useContext, useMemo } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DataContext } from \"../context/DataProvider\";\nexport default function Calendar() {\n  const {\n    userCourses\n  } = useContext(DataContext);\n  const history = useHistory(); // https://reactrouter.com/web/api/Hooks\n\n  const dayNums = {\n    m: 1,\n    t: 2,\n    w: 3,\n    r: 4,\n    f: 5\n  };\n  const events = useMemo(\n  /* Optimization technique. Memoizes (caches) the array of events so that when this compoent \r\n  rerenders, the map function is only called again if the userCourses changes. Otherwise it\r\n  just returns the cached array. https://reactjs.org/docs/hooks-reference.html#usememo */\n  () => userCourses.map(course => {\n    var _course$meetingDays;\n\n    return {\n      title: `${course.courseNumber} ${course.courseName}`,\n      startTime: course.startTime,\n      endTime: course.endTime,\n      daysOfWeek: (_course$meetingDays = course.meetingDays) === null || _course$meetingDays === void 0 ? void 0 : _course$meetingDays.toLowerCase().split(\"\").map(d => dayNums[d]),\n      url: `/courses/${course.courseId}/details`\n    };\n  }), [userCourses]);\n  return /*#__PURE__*/React.createElement(FullCalendar, {\n    plugins: [dayGridPlugin],\n    initialView: \"dayGridMonth\",\n    events: events,\n    eventClick: info => {\n      /* link event to its corresponding course page \r\n      https://fullcalendar.io/docs/eventClick */\n      info.jsEvent.preventDefault();\n      history.push(info.event.url);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Kronos/Documents/Programming/Web/React/CS-3750-Project/ClientApp/src/components/Calendar.js"],"names":["FullCalendar","dayGridPlugin","React","useContext","useMemo","useHistory","DataContext","Calendar","userCourses","history","dayNums","m","t","w","r","f","events","map","course","title","courseNumber","courseName","startTime","endTime","daysOfWeek","meetingDays","toLowerCase","split","d","url","courseId","info","jsEvent","preventDefault","push","event"],"mappings":";AAAA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,uBAA1B,C,CAAmD;;AACnD,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,OAA5B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AAEA,eAAe,SAASC,QAAT,GAAoB;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAkBL,UAAU,CAACG,WAAD,CAAlC;AAEA,QAAMG,OAAO,GAAGJ,UAAU,EAA1B,CAH+B,CAGD;;AAE9B,QAAMK,OAAO,GAAG;AAAEC,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE,CAAX;AAAcC,IAAAA,CAAC,EAAE,CAAjB;AAAoBC,IAAAA,CAAC,EAAE,CAAvB;AAA0BC,IAAAA,CAAC,EAAE;AAA7B,GAAhB;AAEA,QAAMC,MAAM,GAAGZ,OAAO;AAClB;AACR;AACA;AACQ,QACII,WAAW,CAACS,GAAZ,CAAgBC,MAAM;AAAA;;AAAA,WAAK;AACvBC,MAAAA,KAAK,EAAG,GAAED,MAAM,CAACE,YAAa,IAAGF,MAAM,CAACG,UAAW,EAD5B;AAEvBC,MAAAA,SAAS,EAAEJ,MAAM,CAACI,SAFK;AAGvBC,MAAAA,OAAO,EAAEL,MAAM,CAACK,OAHO;AAIvBC,MAAAA,UAAU,yBAAEN,MAAM,CAACO,WAAT,wDAAE,oBACNC,WADM,GAEPC,KAFO,CAED,EAFC,EAGPV,GAHO,CAGHW,CAAC,IAAIlB,OAAO,CAACkB,CAAD,CAHT,CAJW;AAQvBC,MAAAA,GAAG,EAAG,YAAWX,MAAM,CAACY,QAAS;AARV,KAAL;AAAA,GAAtB,CALc,EAelB,CAACtB,WAAD,CAfkB,CAAtB;AAkBA,sBACI,oBAAC,YAAD;AACI,IAAA,OAAO,EAAE,CAACP,aAAD,CADb;AAEI,IAAA,WAAW,EAAC,cAFhB;AAGI,IAAA,MAAM,EAAEe,MAHZ;AAII,IAAA,UAAU,EAAEe,IAAI,IAAI;AAChB;AAChB;AACgBA,MAAAA,IAAI,CAACC,OAAL,CAAaC,cAAb;AACAxB,MAAAA,OAAO,CAACyB,IAAR,CAAaH,IAAI,CAACI,KAAL,CAAWN,GAAxB;AACH,KATL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAaH","sourcesContent":["import FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\"; // must come after FullCalendar import\r\nimport React, { useContext, useMemo } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { DataContext } from \"../context/DataProvider\";\r\n\r\nexport default function Calendar() {\r\n    const { userCourses } = useContext(DataContext);\r\n\r\n    const history = useHistory(); // https://reactrouter.com/web/api/Hooks\r\n\r\n    const dayNums = { m: 1, t: 2, w: 3, r: 4, f: 5 };\r\n\r\n    const events = useMemo(\r\n        /* Optimization technique. Memoizes (caches) the array of events so that when this compoent \r\n        rerenders, the map function is only called again if the userCourses changes. Otherwise it\r\n        just returns the cached array. https://reactjs.org/docs/hooks-reference.html#usememo */\r\n        () =>\r\n            userCourses.map(course => ({\r\n                title: `${course.courseNumber} ${course.courseName}`,\r\n                startTime: course.startTime,\r\n                endTime: course.endTime,\r\n                daysOfWeek: course.meetingDays\r\n                    ?.toLowerCase()\r\n                    .split(\"\")\r\n                    .map(d => dayNums[d]),\r\n                url: `/courses/${course.courseId}/details`\r\n            })),\r\n        [userCourses]\r\n    );\r\n\r\n    return (\r\n        <FullCalendar\r\n            plugins={[dayGridPlugin]}\r\n            initialView=\"dayGridMonth\"\r\n            events={events}\r\n            eventClick={info => {\r\n                /* link event to its corresponding course page \r\n                https://fullcalendar.io/docs/eventClick */\r\n                info.jsEvent.preventDefault();\r\n                history.push(info.event.url);\r\n            }}\r\n        />\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}