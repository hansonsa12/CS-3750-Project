{"ast":null,"code":"'use strict'; // By default, select the browser (DOM) platform.\n// @TODO Make possible to select another platform at build time.\n\nvar implementation = require('./platform.dom.js');\n\nmodule.exports = function (Chart) {\n  /**\n   * @namespace Chart.platform\n   * @see https://chartjs.gitbooks.io/proposals/content/Platform.html\n   * @since 2.4.0\n   */\n  Chart.platform = {\n    /**\n     * Called at chart construction time, returns a context2d instance implementing\n     * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n     * @param {*} item - The native item from which to acquire context (platform specific)\n     * @param {Object} options - The chart options\n     * @returns {CanvasRenderingContext2D} context2d instance\n     */\n    acquireContext: function () {},\n\n    /**\n     * Called at chart destruction time, releases any resources associated to the context\n     * previously returned by the acquireContext() method.\n     * @param {CanvasRenderingContext2D} context - The context2d instance\n     * @returns {Boolean} true if the method succeeded, else false\n     */\n    releaseContext: function () {},\n\n    /**\n     * Registers the specified listener on the given chart.\n     * @param {Chart} chart - Chart from which to listen for event\n     * @param {String} type - The ({@link IEvent}) type to listen for\n     * @param {Function} listener - Receives a notification (an object that implements\n     * the {@link IEvent} interface) when an event of the specified type occurs.\n     */\n    addEventListener: function () {},\n\n    /**\n     * Removes the specified listener previously registered with addEventListener.\n     * @param {Chart} chart -Chart from which to remove the listener\n     * @param {String} type - The ({@link IEvent}) type to remove\n     * @param {Function} listener - The listener function to remove from the event target.\n     */\n    removeEventListener: function () {}\n  };\n  /**\n   * @interface IPlatform\n   * Allows abstracting platform dependencies away from the chart\n   * @borrows Chart.platform.acquireContext as acquireContext\n   * @borrows Chart.platform.releaseContext as releaseContext\n   * @borrows Chart.platform.addEventListener as addEventListener\n   * @borrows Chart.platform.removeEventListener as removeEventListener\n   */\n\n  /**\n   * @interface IEvent\n   * @prop {String} type - The event type name, possible values are:\n   * 'contextmenu', 'mouseenter', 'mousedown', 'mousemove', 'mouseup', 'mouseout',\n   * 'click', 'dblclick', 'keydown', 'keypress', 'keyup' and 'resize'\n   * @prop {*} native - The original native event (null for emulated events, e.g. 'resize')\n   * @prop {Number} x - The mouse x position, relative to the canvas (null for incompatible events)\n   * @prop {Number} y - The mouse y position, relative to the canvas (null for incompatible events)\n   */\n\n  Chart.helpers.extend(Chart.platform, implementation(Chart));\n};","map":{"version":3,"sources":["C:/Users/Kronos/Documents/Programming/Web/React/CS-3750-Project/ClientApp/node_modules/chart.js/src/platforms/platform.js"],"names":["implementation","require","module","exports","Chart","platform","acquireContext","releaseContext","addEventListener","removeEventListener","helpers","extend"],"mappings":"AAAA,a,CAEA;AACA;;AACA,IAAIA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA5B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,KAAT,EAAgB;AAChC;AACD;AACA;AACA;AACA;AACCA,EAAAA,KAAK,CAACC,QAAN,GAAiB;AAChB;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,cAAc,EAAE,YAAW,CAAE,CARb;;AAUhB;AACF;AACA;AACA;AACA;AACA;AACEC,IAAAA,cAAc,EAAE,YAAW,CAAE,CAhBb;;AAkBhB;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,gBAAgB,EAAE,YAAW,CAAE,CAzBf;;AA2BhB;AACF;AACA;AACA;AACA;AACA;AACEC,IAAAA,mBAAmB,EAAE,YAAW,CAAE;AAjClB,GAAjB;AAoCA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAECL,EAAAA,KAAK,CAACM,OAAN,CAAcC,MAAd,CAAqBP,KAAK,CAACC,QAA3B,EAAqCL,cAAc,CAACI,KAAD,CAAnD;AACA,CA9DD","sourcesContent":["'use strict';\n\n// By default, select the browser (DOM) platform.\n// @TODO Make possible to select another platform at build time.\nvar implementation = require('./platform.dom.js');\n\nmodule.exports = function(Chart) {\n\t/**\n\t * @namespace Chart.platform\n\t * @see https://chartjs.gitbooks.io/proposals/content/Platform.html\n\t * @since 2.4.0\n\t */\n\tChart.platform = {\n\t\t/**\n\t\t * Called at chart construction time, returns a context2d instance implementing\n\t\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t\t * @param {*} item - The native item from which to acquire context (platform specific)\n\t\t * @param {Object} options - The chart options\n\t\t * @returns {CanvasRenderingContext2D} context2d instance\n\t\t */\n\t\tacquireContext: function() {},\n\n\t\t/**\n\t\t * Called at chart destruction time, releases any resources associated to the context\n\t\t * previously returned by the acquireContext() method.\n\t\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t\t * @returns {Boolean} true if the method succeeded, else false\n\t\t */\n\t\treleaseContext: function() {},\n\n\t\t/**\n\t\t * Registers the specified listener on the given chart.\n\t\t * @param {Chart} chart - Chart from which to listen for event\n\t\t * @param {String} type - The ({@link IEvent}) type to listen for\n\t\t * @param {Function} listener - Receives a notification (an object that implements\n\t\t * the {@link IEvent} interface) when an event of the specified type occurs.\n\t\t */\n\t\taddEventListener: function() {},\n\n\t\t/**\n\t\t * Removes the specified listener previously registered with addEventListener.\n\t\t * @param {Chart} chart -Chart from which to remove the listener\n\t\t * @param {String} type - The ({@link IEvent}) type to remove\n\t\t * @param {Function} listener - The listener function to remove from the event target.\n\t\t */\n\t\tremoveEventListener: function() {}\n\t};\n\n\t/**\n\t * @interface IPlatform\n\t * Allows abstracting platform dependencies away from the chart\n\t * @borrows Chart.platform.acquireContext as acquireContext\n\t * @borrows Chart.platform.releaseContext as releaseContext\n\t * @borrows Chart.platform.addEventListener as addEventListener\n\t * @borrows Chart.platform.removeEventListener as removeEventListener\n\t */\n\n\t/**\n\t * @interface IEvent\n\t * @prop {String} type - The event type name, possible values are:\n\t * 'contextmenu', 'mouseenter', 'mousedown', 'mousemove', 'mouseup', 'mouseout',\n\t * 'click', 'dblclick', 'keydown', 'keypress', 'keyup' and 'resize'\n\t * @prop {*} native - The original native event (null for emulated events, e.g. 'resize')\n\t * @prop {Number} x - The mouse x position, relative to the canvas (null for incompatible events)\n\t * @prop {Number} y - The mouse y position, relative to the canvas (null for incompatible events)\n\t */\n\n\tChart.helpers.extend(Chart.platform, implementation(Chart));\n};\n"]},"metadata":{},"sourceType":"script"}